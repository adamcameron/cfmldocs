{"HISTORY":"<!-- --><br>ColdFusion 8: Added support for encryption using the RSA BSafe Crypto-J library on Enterprise Edition.<br>ColdFusion MX 7.01: Added the <i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">IVorSalt<\/i> and <i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">iterations<\/i> parameters.<br>ColdFusion MX 7: Added the <i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">algorithm<\/i> and <i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">encoding<\/i> parameters.<br>","SYNTAX":"<!-- --><br>Encrypt(<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">string<\/i>, <i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">key <\/i>[, <i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">algorithm<\/i>, <i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">encoding<\/i>, <i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">IVorSalt<\/i>, <i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">iterations<\/i>])<br>","CATEGORY":"Security functions, String functions","PAGENAME":"Encrypt","SEEALSO":"<!-- --><br><samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7c1c.html\">Decrypt<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-6e75.html\">EncryptBinary<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-6e77.html\">DecryptBinary<\/a><\/samp><br>","DESCRIPTION":"Encrypts a string using a specific algorithm and encoding method.","LICENCE":"http:\/\/help.adobe.com\/en_US\/ColdFusion\/10.0\/LegalNotices\/index.html","EXAMPLE":"<!-- --><br>The following example encrypts and decrypts a text string. It lets you specify the encryption algorithm and encoding technique. It also has a field for a key seed to use with the CFMX_COMPAT algorithm. For all other algorithms, it generates a secret key.<br>&lt;h3&gt;Encrypt Example&lt;\/h3&gt; \r\n&lt;!--- Do the following if the form has been submitted. ---&gt; \r\n&lt;cfif IsDefined(&quot;Form.myString&quot;)&gt; \r\n    &lt;cfscript&gt; \r\n        \/* GenerateSecretKey does not generate key for the CFMX_COMPAT algorithm, \r\n        so use the key from the form. \r\n        *\/ \r\n        if (Form.myAlgorithm EQ &quot;CFMX_COMPAT&quot;) \r\n            theKey=Form.MyKey; \r\n        \/\/ For all other encryption techniques, generate a secret key. \r\n        else \r\n            theKey=generateSecretKey(Form.myAlgorithm); \r\n        \/\/Encrypt the string \r\n        <strong>encrypted=encrypt(Form.myString, theKey, Form.myAlgorithm,<\/strong> \r\n            <strong>Form.myEncoding);<\/strong> \r\n        \/\/Decrypt it \r\n        decrypted=decrypt(encrypted, theKey, Form.myAlgorithm, Form.myEncoding); \r\n    &lt;\/cfscript&gt; \r\n \r\n    &lt;!--- Display the values used for encryption and decryption,  \r\n            and the results. ---&gt; \r\n    &lt;cfoutput&gt; \r\n        &lt;b&gt;The algorithm:&lt;\/b&gt; #Form.myAlgorithm#&lt;br&gt; \r\n        &lt;b&gt;The key:&lt;\/B&gt; #theKey#&lt;br&gt; \r\n        &lt;br&gt; \r\n        &lt;b&gt;The string:&lt;\/b&gt; #Form.myString# &lt;br&gt; \r\n        &lt;br&gt; \r\n        &lt;b&gt;Encrypted:&lt;\/b&gt; #encrypted#&lt;br&gt; \r\n        &lt;br&gt; \r\n        &lt;b&gt;Decrypted:&lt;\/b&gt; #decrypted#&lt;br&gt; \r\n    &lt;\/cfoutput&gt; \r\n&lt;\/cfif&gt; \r\n \r\n&lt;!--- The input form.---&gt; \r\n&lt;form action=&quot;#CGI.SCRIPT_NAME#&quot; method=&quot;post&quot;&gt; \r\n    &lt;b&gt;Select the encoding&lt;\/b&gt;&lt;br&gt; \r\n    &lt;select size=&quot;1&quot; name=&quot;myEncoding&quot;&gt; \r\n        &lt;option selected&gt;UU&lt;\/option&gt; \r\n        &lt;option&gt;Base64&lt;\/option&gt; \r\n        &lt;option&gt;Hex&lt;\/option&gt; \r\n    &lt;\/select&gt;&lt;br&gt; \r\n    &lt;br&gt; \r\n    &lt;b&gt;Select the algorithm&lt;\/b&gt;&lt;br&gt; \r\n    &lt;select size=&quot;1&quot; name=&quot;myAlgorithm&quot;&gt; \r\n        &lt;option selected&gt;CFMX_COMPAT&lt;\/option&gt; \r\n        &lt;option&gt;AES&lt;\/option&gt; \r\n        &lt;option&gt;DES&lt;\/option&gt; \r\n        &lt;option&gt;DESEDE&lt;\/option&gt; \r\n    &lt;\/select&gt;&lt;br&gt; \r\n    &lt;br&gt; \r\n    &lt;b&gt;Input your key&lt;\/b&gt; (used for CFMX_COMPAT encryption only)&lt;br&gt; \r\n    &lt;input type = &quot;Text&quot; name = &quot;myKey&quot; value = &quot;MyKey&quot;&gt;&lt;br&gt; \r\n    &lt;br&gt; \r\n    &lt;b&gt;Enter string to encrypt&lt;\/b&gt;&lt;br&gt; \r\n    &lt;textArea name = &quot;myString&quot; cols = &quot;40&quot; rows = &quot;5&quot; WRAP = &quot;VIRTUAL&quot;&gt;This string will be encrypted (you can replace it with more typing). \r\n    &lt;\/textArea&gt;&lt;br&gt; \r\n    &lt;input type = &quot;Submit&quot; value = &quot;Encrypt my String&quot;&gt; \r\n&lt;\/form&gt;<br>","USAGE":"<!-- --><br>This function uses a symmetric key-based algorithm, in which the same key is used to encrypt and decrypt a string. The security of the encrypted string depends on maintaining the secrecy of the key.<br>The following are the FIPS-140 approved algorithms included in the RSA BSafe Crypto-J library that are used by ColdFusion. Some of these are <i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">not<\/i> used with the encrypt function, but are used with other functions:<br><li><p>AES – ECB, CBC, CFB (128), OFB (128) – [128, 192, 256-bit key sizes]<\/p> <\/li> \n<li><p>AES – CTR<\/p> <\/li> \n<li><p>Diffie-Hellman Key Agreement<\/p> <\/li> \n<li><p>DSA<\/p> <\/li> \n<li><p>FIPS 186-2 General Purpose [(x-Change Notice); (SHA-1)]<\/p> <\/li> \n<li><p>FIPS 186-2 [(x-Change Notice); (SHA-1)]<\/p> <\/li> \n<li><p>HMAC-SHAx (where x is 1, 224, 256, 384, or 512)<\/p> <\/li> \n<li><p>RSA PKCS#1 v1.5 (sign, verify) (SHA-1,SHA-224,SHA-256,SHA-384,SHA-512)<\/p> <\/li> \n<li><p>Secure Hash Standard (SHA-1, SHA-224, SHA-256, SHA-384, SHA-512)<\/p> <\/li> \n<li><p>Triple DES - ECB, CBC, CFB (64 bit), and OFB (64 bit)<\/p> <\/li><br>All algorithms included in the RSA BSafe Crypto-J library are available for use in the Enterprise Edition. In certain cases, you may want to disable some algorithms. To disable the DESX, RC5, and MD5PRNG algorithms, specify the following in the JVM arguments on the Java and JVM page of the ColdFusion Administrator:<br>-Dcoldfusion.enablefipscrypto=true<br>FIPS-140 approved cryptography is not available if you are running ColdFusion on WebSphere of JBoss.<br>To use the IBM\/Lotus Sametime Instant Messaging Gateway in the Enterprise edition, disable the FIPS-140-only cryptography setting by specifying the following in the JVM arguments on the Java and JVM page of the ColdFusion Administrator:<br>-Dcoldfusion.disablejsafe=true<br>In Standard Edition, for all algorithms except the default algorithm, ColdFusion uses the Java Cryptography Extension (JCE) and installs a Sun Java runtime that includes the Sun JCE default security provider. This provider includes the algorithms listed in the Parameters section. The JCE framework includes facilities for using other provider implementations; however, Adobe cannot provide technical support for third-party security providers.<br>The default algorithm, which is the same one used in ColdFusion 5 and ColdFusion MX, uses an XOR-based algorithm that uses a pseudo-random 32-bit key, based on a seed passed by the user as a function parameter. This algorithm is less secure than the other available algorithms.<br>","Parameter":[{"DESCRIPTION":"String to encrypt.","Parameter":"string"},{"DESCRIPTION":"String. Key or seed used to encrypt the string. For the CFMX_COMPAT algorithm, any combination of any number of characters; used as a seed used to generate a 32-bit encryption key. For all other algorithms, a key in the format used by the algorithm. For these algorithms, use the GenerateSecretKey function to generate the key.","Parameter":"key"},{"DESCRIPTION":"(Optional) The algorithm to use to encrypt the string. The Enterprise Edition of ColdFusion installs the RSA BSafe Crypto-J library, which provides FIPS-140 Compliant Strong Cryptography. It includes the following algorithms: AES: the Advanced Encryption Standard specified by the National Institute of Standards and Technology (NIST) FIPS-197. DES: the Data Encryption Standard algorithm defined by NIST FIPS-46-3. DES-EDE: the \"Triple DES\" algorithm defined by NIST FIPS-46-3. DESX: The extended Data Encryption Standard symmetric encryption algorithm.","Parameter":"algorithm"},{"DESCRIPTION":"RC2: The RC2 block symmetric encryption algorithm defined by RFC 2268. RC4: The RC4 symmetric encryption algorithm. RC5: The RC5 encryption algorithm. PBE: Password-based encryption algorithm defined in PKCS #5.","Parameter":""},{"DESCRIPTION":"In addition to these algorithms, you can use the algorithms provided in the Standard Edition of ColdFusion.","Parameter":""},{"DESCRIPTION":"The Standard Edition of ColdFusion installs a cryptography library with the following algorithms: CFMX_COMPAT: the algorithm used in ColdFusion MX and prior releases. This algorithm is the least secure option (default). AES: the Advanced Encryption Standard specified by the National Institute of Standards and Technology (NIST) FIPS-197. BLOWFISH: the Blowfish algorithm defined by Bruce Schneier. DES: the Data Encryption Standard algorithm defined by NIST FIPS-46-3. DESEDE: the \"Triple DES\" algorithm defined by NIST FIPS-46-3. If you install a security provider with additional cryptography algorithms, you can also specify any of its string encryption and decryption algorithms.","Parameter":""},{"DESCRIPTION":"(Optional; if you specify this parameter, also specify the algorithm parameter). The binary encoding in which to represent the data as a string. Base64: the Base64 algorithm, as specified by IETF RFC 2045. Hex: the characters A-F0-9 represent the hexadecimal byte values. UU: the UUEncode algorithm (default).","Parameter":"encoding"},{"DESCRIPTION":"(Optional) Specify this parameter to adjust ColdFusion encryption to match the details of other encryption software. If you specify this parameter, also specify the algorithm parameter. For Block Encryption algorithms: This is the binary Initialization Vector value to use with the algorithm. The algorithm must contain a Feedback Mode other than ECB. This must be a binary value that is exactly the same size as the algorithm block size. Use the same value in the Decrypt function to successfully decrypt the data. For Password Based Encryption algorithms: This is the binary Salt value to transform the password into a key. The same value must be used to decrypt the data.","Parameter":"IVorSalt"},{"DESCRIPTION":"(Optional) The number of iterations to transform the password into a binary key. Specify this parameter to adjust ColdFusion encryption to match the details of other encryption software. If you specify this parameter, also specify the algorithm parameter with a Password Based Encryption (PBE) algorithm. Do not specify this parameter for Block Encryption algorithms. Use the same value to encrypt and decrypt the data.","Parameter":"iterations"}]}