{"HISTORY":"<!-- --><br>ColdFusion 8: Added the <samp class=\"codeph\">keysize<\/samp> attribute.<br>ColdFusion MX 7: Added this function.<br>","SYNTAX":"<!-- --><br>GenerateSecretKey(<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">algorithm<\/i> [,<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">keysize<\/i>])<br>","CATEGORY":"Security functions, String functions","PAGENAME":"GenerateSecretKey","SEEALSO":"<!-- --><br><samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7c1c.html\">Decrypt<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7c2f.html\">Encrypt<\/a><\/samp><br>","DESCRIPTION":"Gets a secure key value for use in the Encrypt function.","LICENCE":"http:\/\/help.adobe.com\/en_US\/ColdFusion\/10.0\/LegalNotices\/index.html","EXAMPLE":"<!-- --><br>The following example encrypts and decrypts a text string. It lets you specify the encryption algorithm and encoding technique. It also has a field for a key seed to use with the CFMX_COMPAT algorithm. For all other algorithms, it uses the <samp class=\"codeph\">GenerateSecretKey<\/samp> function to generate a secret key.<br>&lt;h3&gt;Decrypt Example&lt;\/h3&gt; \r\n \r\n&lt;!--- Do the following if the form has been submitted. ---&gt; \r\n&lt;cfif IsDefined(&quot;Form.myString&quot;)&gt; \r\n    &lt;cfscript&gt; \r\n        \/* GenerateSecretKey does not generate keys for the CFMX_COMPAT algorithm, \r\n        so we use a key from the form. \r\n        *\/ \r\n        if (Form.myAlgorithm EQ &quot;CFMX_COMPAT&quot;) \r\n            theKey=Form.MyKey; \r\n        \/\/ For all other encryption techniques, generate a secret key. \r\n        else \r\n            <strong>theKey=generateSecretKey(Form.myAlgorithm);<\/strong> \r\n        \/\/Encrypt the string. \r\n        encrypted=encrypt(Form.myString, theKey, Form.myAlgorithm, \r\n                Form.myEncoding); \r\n        \/\/Decrypt it. \r\n        decrypted=decrypt(encrypted, theKey, Form.myAlgorithm, Form.myEncoding); \r\n    &lt;\/cfscript&gt; \r\n \r\n    &lt;!--- Display the values used for encryption and decryption,  \r\n            and the results. ---&gt; \r\n    &lt;cfoutput&gt; \r\n        &lt;b&gt;The algorithm:&lt;\/b&gt; #Form.myAlgorithm#&lt;br&gt; \r\n        &lt;b&gt;The key:&lt;\/B&gt; #theKey#&lt;br&gt; \r\n        &lt;br&gt; \r\n        &lt;b&gt;The string:&lt;\/b&gt; #Form.myString# &lt;br&gt; \r\n        &lt;br&gt; \r\n        &lt;b&gt;Encrypted:&lt;\/b&gt; #encrypted#&lt;br&gt; \r\n        &lt;br&gt; \r\n        &lt;b&gt;Decrypted:&lt;\/b&gt; #decrypted#&lt;br&gt; \r\n    &lt;\/cfoutput&gt; \r\n&lt;\/cfif&gt; \r\n \r\n&lt;!--- The input form. ---&gt; \r\n&lt;form action=&quot;#CGI.SCRIPT_NAME#&quot; method=&quot;post&quot;&gt; \r\n    &lt;b&gt;Select the encoding&lt;\/b&gt;&lt;br&gt; \r\n    &lt;select size=&quot;1&quot; name=&quot;myEncoding&quot; &gt; \r\n        &lt;option selected&gt;UU&lt;\/option&gt; \r\n        &lt;option&gt;Base64&lt;\/option&gt; \r\n        &lt;option&gt;Hex&lt;\/option&gt; \r\n    &lt;\/select&gt;&lt;br&gt; \r\n    &lt;br&gt; \r\n    &lt;b&gt;Select the algorithm&lt;\/b&gt;&lt;br&gt; \r\n    &lt;select size=&quot;1&quot; name=&quot;myAlgorithm&quot; &gt; \r\n        &lt;option selected&gt;CFMX_COMPAT&lt;\/option&gt; \r\n        &lt;option&gt;AES&lt;\/option&gt; \r\n        &lt;option&gt;DES&lt;\/option&gt; \r\n        &lt;option&gt;DESEDE&lt;\/option&gt; \r\n    &lt;\/select&gt;&lt;br&gt; \r\n    &lt;br&gt; \r\n    &lt;b&gt;Input your key&lt;\/b&gt; (used for CFMX_COMPAT encryption only)&lt;br&gt; \r\n    &lt;input type = &quot;Text&quot; name = &quot;myKey&quot; value = &quot;foobar&quot;&gt;&lt;br&gt; \r\n    &lt;br&gt; \r\n    &lt;b&gt;Enter string to encrypt&lt;\/b&gt;&lt;br&gt; \r\n    &lt;textArea name = &quot;myString&quot; cols = &quot;40&quot; rows = &quot;5&quot; WRAP = &quot;VIRTUAL&quot;&gt;This string will be encrypted (you can replace it with more typing). \r\n    &lt;\/textArea&gt;&lt;br&gt; \r\n    &lt;input type = &quot;Submit&quot; value = &quot;Encrypt my String&quot;&gt; \r\n&lt;\/form&gt;<br>","USAGE":"<!-- --><br>You cannot use the <samp class=\"codeph\">GenerateSecretKey<\/samp> function to generate a key for the ColdFusion default encryption algorithm (CFMX_COMPAT) of the <samp class=\"codeph\">Encrypt<\/samp> and <samp class=\"codeph\">Decrypt<\/samp> functions.<br>ColdFusion uses the Java Cryptography Extension (JCE) and installs a Sun Java runtime that includes the Sun JCE default security provider. This provider includes the algorithms listed in the Parameters section. The JCE framework includes facilities for using other provider implementations; however, Adobe cannot provide technical support for third-party security providers.<br>","Parameter":[{"DESCRIPTION":"The encryption algorithm for which to generate the key. ColdFusion installs a cryptography library with the following algorithms: AES: the Advanced Encryption Standard specified by the National Institute of Standards and Technology (NIST) FIPS-197. BLOWFISH: the Blowfish algorithm defined by Bruce Schneier. DES: the Data Encryption Standard algorithm defined by NIST FIPS-46-3. DESEDE: the \"Triple DES\" algorithm defined by NIST FIPS-46-3.","Parameter":"algorithm"},{"DESCRIPTION":"Number of bits requested in the key for the specified algorithm. You can use this to request longer keys when allowed by the JDK. For example, the AES algorithm keys are limited to 128 bits unless the Java Unlimited Strength Jurisdiction Policy Files are installed. For more information, see http:\/\/java.sun.com\/products\/jce\/index-14.html.","Parameter":"keysize"}]}