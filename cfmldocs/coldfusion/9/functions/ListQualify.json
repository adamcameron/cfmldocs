{"HISTORY":"<!-- --><br>ColdFusion MX: Changed behavior: as the <samp class=\"codeph\">elements<\/samp> parameter value, you must specify &quot;<samp class=\"codeph\">all&quot;<\/samp> or &quot;<samp class=\"codeph\">char&quot;<\/samp>; otherwise, ColdFusion throws an exception. (In earlier releases, the function ignored an invalid value, and used &quot;<samp class=\"codeph\">all&quot;<\/samp>; this was inconsistent with other functions.)<br>","SYNTAX":"<!-- --><br>ListQualify(<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">list<\/i>, <i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">qualifier<\/i> [, <i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">delimiters<\/i>, <i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">elements, <i>includeEmptyValues<\/i><\/i> ])<br>","CATEGORY":"List functions","PAGENAME":"ListQualify","SEEALSO":"<!-- --><br><a href=\"http:\/\/help.adobe.com\/en_US\/ColdFusion\/9.0\/Developing\/WSf01dbd23413dda0e1fb08f8f11feb424aa7-8000.html\" target=\"_self\">Lists<\/a> in <a href=\"http:\/\/help.adobe.com\/en_US\/ColdFusion\/9.0\/Developing\/WSc3ff6d0ea77859461172e0811cbec22c24-7ff2.html\" target=\"_self\">Using ColdFusion Variables<\/a> in the <i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">Developing ColdFusion Applications<\/i><br>","DESCRIPTION":"Inserts a string at the beginning and end of list elements.","LICENCE":"http:\/\/help.adobe.com\/en_US\/ColdFusion\/10.0\/LegalNotices\/index.html","EXAMPLE":"<!-- --><br>&lt;cfquery name = &quot;GetEmployeeNames&quot; datasource = &quot;cfdocexamples&quot;&gt; \r\nSELECT     FirstName, LastName \r\nFROM     Employees \r\n&lt;\/cfquery&gt; \r\n \r\n&lt;h3&gt;ListQualify Example&lt;\/h3&gt; \r\n&lt;p&gt;This example uses ListQualify to put the full names of the  \r\n    employees in the query within quotation marks.&lt;\/p&gt; \r\n&lt;cfset myArray = ArrayNew(1)&gt; \r\n \r\n&lt;!--- loop through query; append these names successively  \r\n    to the last element ---&gt; \r\n&lt;cfloop query = &quot;GetEmployeeNames&quot;&gt; \r\n    &lt;cfset temp = ArrayAppend(myArray, &quot;#FirstName# #LastName#&quot;)&gt; \r\n&lt;\/cfloop&gt; \r\n \r\n&lt;!--- sort that array descending alphabetically ---&gt; \r\n&lt;cfset myAlphaArray = ArraySort(myArray, &quot;textnocase&quot;)&gt; \r\n \r\n&lt;!--- show the resulting array as a list ---&gt; \r\n&lt;cfset myList = ArrayToList(myArray, &quot;,&quot;)&gt; \r\n \r\n&lt;cfoutput&gt; \r\n    &lt;p&gt;The contents of the unqualified list are as follows:    &lt;\/p&gt; \r\n    #myList# \r\n&lt;\/cfoutput&gt; \r\n \r\n&lt;!--- show the resulting alphabetized array as a qualified list with  \r\n    single quotation marks around each full name.---&gt; \r\n&lt;cfset qualifiedList1 = ListQualify(myList,&quot;'&quot;,&quot;,&quot;,&quot;CHAR&quot;)&gt; \r\n \r\n&lt;!--- output the array as a list ---&gt; \r\n&lt;cfoutput&gt; \r\n    &lt;p&gt;The contents of the qualified list are as follows:    &lt;\/p&gt; \r\n    &lt;p&gt;#qualifiedList1#&lt;\/p&gt; \r\n&lt;\/cfoutput&gt; \r\n \r\n&lt;!--- show the resulting alphabetized array as a qualified list with quotation \r\n    marks around each full name. We use &amp;quot; to denote quotation marks \r\n    because the quotation mark character is a control character. ---&gt; \r\n&lt;cfset qualifiedList2 = ListQualify(myList,&quot;&amp;quot;&quot;,&quot;,&quot;,&quot;CHAR&quot;)&gt; \r\n \r\n&lt;!--- output the array as a list ---&gt; \r\n&lt;cfoutput&gt; \r\n    &lt;p&gt;The contents of the second qualified list are:    &lt;\/p&gt; \r\n    &lt;p&gt;#qualifiedList2#&lt;\/p&gt; \r\n&lt;\/cfoutput&gt;<br>","USAGE":"<!-- --><br>The new list might not preserve all of the delimiters in the list.<br>ColdFusion ignores empty list elements; thus, the list &quot;a,b,c,,,d&quot; has four elements.<br>","Parameter":[{"DESCRIPTION":"Optional. Set to yes to include empty values.","Parameter":"includeEmptyValues"},{"DESCRIPTION":"A list or a variable that contains one.","Parameter":"list"},{"DESCRIPTION":"A string or a variable that contains one. Character or string to insert before and after the list elements specified in the elements parameter.","Parameter":"qualifier"},{"DESCRIPTION":"A string or a variable that contains one. Characters that separate list elements. The default value is comma. If this parameter contains more than one character, ColdFusion uses the first character as the delimiter and ignores the remaining characters.","Parameter":"delimiters"},{"DESCRIPTION":"all: all elements char: elements that are composed of alphabetic characters","Parameter":"elements"}]}