{"HISTORY":"","SYNTAX":"<!-- --><br>REFind(<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">reg_expression<\/i>, <i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">string<\/i> [, <i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">start<\/i>, <i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">returnsubexpressions<\/i> ] )<br>","CATEGORY":"String functions","PAGENAME":"REFind","SEEALSO":"<!-- --><br><samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7e7c.html\">Find<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-6e16.html\">FindNoCase<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7e99.html\">REFindNoCase<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7e98.html\">REReplace<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7e97.html\">REReplaceNoCase<\/a><\/samp><br>","DESCRIPTION":"Uses a regular expression (RE) to search a string for a pattern. The search is case sensitive.","LICENCE":"http:\/\/help.adobe.com\/en_US\/ColdFusion\/10.0\/LegalNotices\/index.html","EXAMPLE":"<!-- --><br>&lt;h3&gt;REFind Example&lt;\/h3&gt; \r\n&lt;p&gt;This example shows the use of the REFind function with and without the \r\n    &lt;i&gt;returnsubexpressions&lt;\/i&gt; parameter set to True.  \r\n    If you do not use the &lt;i&gt;returnsubexpressions&lt;\/i&gt; parameter,  \r\n    REFind returns the position of the first occurrence of a regular \r\n    expression in a string starting from the specified position.  \r\n    Returns 0 if no occurrences are found.&lt;\/p&gt; \r\n \r\n&lt;p&gt;REFind(&quot;a+c+&quot;, &quot;abcaaccdd&quot;):     \r\n&lt;cfoutput&gt;#REFind(&quot;a+c+&quot;, &quot;abcaaccdd&quot;)#&lt;\/cfoutput&gt;&lt;\/p&gt; \r\n&lt;p&gt;REFind(&quot;a+c*&quot;, &quot;abcaaccdd&quot;):     \r\n&lt;cfoutput&gt;#REFind(&quot;a+c*&quot;, &quot;abcaaccdd&quot;)#&lt;\/cfoutput&gt;&lt;\/p&gt; \r\n&lt;p&gt;REFind(&quot;[[:upper:]]&quot;, &quot;abcaacCDD&quot;):     \r\n&lt;cfoutput&gt;#REFind(&quot;[[:upper:]]&quot;, &quot;abcaacCDD&quot;)#&lt;\/cfoutput&gt;&lt;\/p&gt; \r\n&lt;p&gt;REFind(&quot;[\\?&amp;]rep = &quot;, &quot;report.cfm?rep = 1234&amp;u = 5&quot;): \r\n    &lt;cfoutput&gt;#REFind(&quot;[\\?&amp;]rep = &quot;, &quot;report.cfm?rep = 1234&amp;u = 5&quot;)# \r\n    &lt;\/cfoutput&gt; \r\n&lt;\/p&gt; \r\n&lt;!--- Set startPos to one; returnMatchedSubexpressions = TRUE ---&gt; \r\n&lt;hr size = &quot;2&quot; color = &quot;#0000A0&quot;&gt; \r\n&lt;p&gt;If you use the &lt;i&gt;returnssubexpression&lt;\/i&gt; parameter, REFind returns the \r\n    position and length of the first occurrence of a regular expression  \r\n    in a string starting from the specified position. The position and  \r\n    length variables are stored in a structure. To access position and length \r\n    information, use the keys &lt;i&gt;pos&lt;\/i&gt; and &lt;i&gt;len&lt;\/i&gt;, respectively.&lt;\/p&gt; \r\n&lt;cfset teststring = &quot;The cat in the hat hat came back!&quot;&gt; \r\n&lt;p&gt;The string in which the function is to search is: \r\n&lt;cfoutput&gt;&lt;b&gt;#teststring#&lt;\/b&gt;&lt;\/cfoutput&gt;.&lt;\/p&gt; \r\n&lt;p&gt;The first call to REFind to search this string is: \r\n        &lt;b&gt;REFind(&quot;[A-Za-z]+&quot;,testString,1,&quot;TRUE&quot;)&lt;\/b&gt;&lt;\/p&gt; \r\n&lt;p&gt;This function returns a structure that contains two arrays: pos and len.&lt;\/p&gt; \r\n&lt;p&gt;To create this structure you can use a CFSET statement, for example: &lt;\/p&gt; \r\n&amp;lt;CFSET st = REFind(&quot;[[:alpha:]]&quot;,testString,1,&quot;TRUE&quot;)&amp;gt; \r\n&lt;cfset st = REFind(&quot;[[:alpha:]]&quot;,testString,1,&quot;TRUE&quot;)&gt; \r\n&lt;p&gt; \r\n    &lt;cfoutput&gt; \r\n    The number of elements in each array: #ArrayLen(st.pos)#. \r\n    &lt;\/cfoutput&gt;&lt;\/p&gt; \r\n&lt;p&gt;&lt;b&gt;The number of elements in the pos and len arrays is always one  \r\n    if you do not use parentheses in the regular expression.&lt;\/b&gt;&lt;\/p&gt; \r\n&lt;p&gt;The value of st.pos[1] is: &lt;cfoutput&gt;#st.pos[1]#.&lt;\/cfoutput&gt;&lt;\/p&gt; \r\n&lt;p&gt;The value of st.len[1] is: &lt;cfoutput&gt;#st.len[1]#.&lt;\/cfoutput&gt;&lt;\/p&gt; \r\n&lt;p&gt;     \r\n&lt;cfoutput&gt; \r\n    Substring is &lt;b&gt;[#Mid(testString,st.pos[1],st.len[1])#]&lt;\/B&gt; \r\n    &lt;\/cfoutput&gt;&lt;\/p&gt; \r\n&lt;hr size = &quot;2&quot; color = &quot;#0000A0&quot;&gt; \r\n&lt;p&gt;However, if you use parentheses in the regular expression, the first  \r\n    element contains the position and length of the first instance  \r\n    of the whole expression. The position and length of the first instance \r\n    of each parenthesized subexpression within is included in additional \r\n    array elements.&lt;\/p&gt; \r\n&lt;p&gt;For example:  \r\n&amp;lt;CFSET st1 = REFind(&quot;([[:alpha:]])[ ]+(\\1)&quot;,testString,1,&quot;TRUE&quot;)&amp;gt;&lt;\/p&gt; \r\n&lt;cfset st1 = REFind(&quot;([[:alpha:]]+)[ ]+(\\1)&quot;,testString,1,&quot;TRUE&quot;)&gt; \r\n&lt;p&gt;The number of elements in each array is &lt;cfoutput&gt;#ArrayLen(st1.pos)# \r\n    &lt;\/cfoutput&gt;.&lt;\/p&gt; \r\n&lt;p&gt;First whole expression match; position is  \r\n    &lt;cfoutput&gt;#st1.pos[1]#; \r\n        length is #st1.len[1]#; whole expression match is \r\n        &lt;B&gt;[#Mid(testString,st1.pos[1],st1.len[1])#]&lt;\/B&gt; \r\n    &lt;\/cfoutput&gt;&lt;\/p&gt; \r\n&lt;p&gt;Subsequent elements of the arrays provide the position and length of  \r\n    the first instance of each parenthesized subexpression therein.&lt;\/p&gt; \r\n    &lt;cfloop index = &quot;i&quot; from = &quot;2&quot; to = &quot;#ArrayLen(st1.pos)#&quot;&gt; \r\n    &lt;p&gt;&lt;cfoutput&gt;Position is #st1.pos[i]#; Length is #st1.len[i]#; \r\n    Substring is &lt;B&gt;[#Mid(testString,st1.pos[i],st1.len[i])#] \r\n    &lt;\/B&gt;&lt;\/cfoutput&gt;&lt;\/p&gt; \r\n&lt;\/cfloop&gt;&lt;br&gt;<br>","USAGE":"<!-- --><br>This function finds the first occurrence of a regular expression in a string. To find the second and subsequent instances of the expression or of subexpressions in it, you call this function more than once, each time with a different start position. To determine the next start position, use the <samp class=\"codeph\">returnsubexpressions<\/samp>parameter, and add the value returned in the first element of the length array to the value in the first element of the position array.<br>","Parameter":[{"DESCRIPTION":"Regular expression for which to search. Case sensitive.","Parameter":"reg_expression"},{"DESCRIPTION":"A string, or a variable that contains one, in which to search.","Parameter":"string"},{"DESCRIPTION":"Optional. A positive integer, or a variable that contains one. Position in the string at which to start search. The default value is 1.","Parameter":"start"},{"DESCRIPTION":"Optional. Boolean. Whether to return substrings of reg_expression, in arrays named len and pos: True: if the regular expression is found, the first array element contains the length and position, respectively, of the first match. If the regular expression contains parentheses that group subexpressions, each subsequent array element contains the length and position, respectively, of the first occurrence of each group. If the regular expression is not found, the arrays each contain one element with the value 0. False: the function returns the position in the string where the match begins. Default.","Parameter":"returnsubexpressions"}]}