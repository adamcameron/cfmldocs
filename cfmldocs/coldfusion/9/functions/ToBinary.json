{"HISTORY":"","SYNTAX":"<!-- --><br><i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">ToBinary(Data)<\/i><br>","CATEGORY":"Conversion functions, String functions","PAGENAME":"ToBinary","SEEALSO":"<!-- --><br><li><p><samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7fc5.html\">BinaryDecode<\/a><\/samp> for conversion of binary-encoded data, including Base64, to binary data<\/p> <\/li> \n<li><p><samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7fa1.html\">cffile<\/a><\/samp> for information about loading and reading binary data<\/p> <\/li> \n<li><p><samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7ca6.html\">cfwddx<\/a><\/samp>for information about serializing and deserializing binary data<\/p> <\/li> \n<li><p><samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7fac.html\">IsBinary<\/a><\/samp> and <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7fc0.html\">ToBase64<\/a><\/samp> for checking format and converting to Base64 <\/p> <\/li> \n<li><p><samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7f38.html\">Len<\/a><\/samp> for determining the length of a binary object<\/p> <\/li> \n<li><p><a href=\"http:\/\/help.adobe.com\/en_US\/ColdFusion\/9.0\/Developing\/WSc3ff6d0ea77859461172e0811cbec22c24-7fd1.html\" target=\"_self\">Binary data type and binary encoding<\/a> in the <i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">Developing ColdFusion Applications<\/i><\/p> <\/li><br>","DESCRIPTION":"Calculates the binary representation of Base64-encoded data or of a PDF document.","LICENCE":"http:\/\/help.adobe.com\/en_US\/ColdFusion\/10.0\/LegalNotices\/index.html","EXAMPLE":"<!-- --><br>&lt;h3&gt;ToBinary Example&lt;\/h3&gt; \r\n&lt;!---- Initialize data. ----&gt; \r\n&lt;cfset charData = &quot;&quot;&gt; \r\n&lt;!---- Create a string of ASCII characters (32-255); concatenate them. ----&gt; \r\n&lt;cfloop index = &quot;data&quot; from = &quot;32&quot; to = &quot;255&quot;&gt; \r\n    &lt;cfset ch = chr(data)&gt; \r\n    &lt;cfset charData = charData &amp; ch&gt; \r\n&lt;\/cfloop&gt; \r\n&lt;p&gt;The following string is the concatenation of all characters (32 to 255)  \r\n    from the ASCII table.&lt;br&gt; \r\n&lt;cfoutput&gt;#charData#&lt;\/cfoutput&gt;&lt;\/p&gt; \r\n&lt;!----- Create a Base64 representation of this string. -----&gt; \r\n&lt;cfset data64 = toBase64(charData)&gt; \r\n \r\n&lt;!--- Convert string to binary. ----&gt; \r\n&lt;cfset binaryData = toBinary(data64)&gt; \r\n&lt;!--- Convert binary back to Base64. ---&gt; \r\n&lt;cfset another64 = toBase64(binaryData)&gt; \r\n&lt;!---- Compare another64 with data64 to ensure that they are equal. ----&gt; \r\n&lt;cfif another64 eq data64&gt; \r\n    &lt;h3&gt;Base64 representation of binary data is identical to the Base64 \r\n    representation of string data.&lt;\/h3&gt; \r\n&lt;cfelse&gt; \r\n    &lt;h3&gt;Conversion error.&lt;\/h3&gt; \r\n&lt;\/cfif&gt;<br>","USAGE":"<!-- --><br>The <samp class=\"codeph\">ToBinary<\/samp> function can take as a parameter a PDF document variable (specified by the <samp class=\"codeph\">cfpdf<\/samp> tag name attribute). In this case, the <samp class=\"codeph\">ToBinary<\/samp> function returns a byte array (byte[]) representation of the document. You can use the results of this function, for example, to store the PDF in a database as a BLOB, or, in a <samp class=\"codeph\">cfcontent<\/samp> tag, to write the PDF to the browser. You can use this binary representation with a read operation in the <samp class=\"codeph\">cfpdf<\/samp> tag to create a variable.<br>The following example reads an unprotected PDF file, applies protections, and displays it in the browser:<br>&lt;cfpdf action=&quot;read&quot; source=&quot;Copy of coldfusion11.pdf&quot; name=&quot;p&quot;&gt; \r\n&lt;cfpdf action=&quot;protect&quot; source=&quot;p&quot; newUserpassword=&quot;user&quot; permissions=&quot;none&quot; \r\n        newOwnerpassword=&quot;owner&quot;&gt; \r\n&lt;cfcontent type=&quot;application\/pdf&quot; variable=&quot;#tobinary(p)#&quot;&gt;<br>Adobe recommends that you use the <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7fc5.html\">BinaryDecode<\/a><\/samp> function to convert Base64 encoded data to binary data in all new applications.<br>If you pass a binary value to this function, it returns the input value.<br>","Parameter":[{"DESCRIPTION":"A variable representing data in Base64-encoded format or a PDF document.","Parameter":"Data"}]}