{"HISTORY":"<!-- --><br>ColdFusion 8: Added the <samp class=\"codeph\">setsavepoint<\/samp> value to the <samp class=\"codeph\">action<\/samp> attribute. Added the <samp class=\"codeph\">savepoint<\/samp> attribute.<br>","SYNTAX":"<!-- --><br>&lt;cftransaction  \r\n    action = &quot;begin|commit|rollback|setsavepoint&quot; \r\n    isolation = &quot;read_uncommitted|read_committed|repeatable_read&quot; \r\n    savepoint = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">savepoint name<\/i>&quot;&gt; \r\n&lt;\/cftransaction&gt;<br><span class=\"notetitle\">Note: <\/span>You can specify this tag’s attributes in an \n<samp class=\"codeph\">attributeCollection<\/samp> attribute whose value is a structure. Specify the structure name in the \n<samp class=\"codeph\">attributeCollection<\/samp> attribute and use the tag’s attribute names as structure keys.<br>","CATEGORY":"Database manipulation tags","PAGENAME":"cftransaction","SEEALSO":"<!-- --><br><samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7c78.html\">cfinsert<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7d52.html\">cfprocparam<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7f95.html\">cfprocresult<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7fae.html\">cfquery<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7f6f.html\">cfqueryparam<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7d55.html\">cfstoredproc<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7c6a.html\">cfupdate<\/a><\/samp>; <a href=\"http:\/\/help.adobe.com\/en_US\/ColdFusion\/9.0\/Developing\/WSc3ff6d0ea77859461172e0811cbec22c24-6eb8.html\" target=\"_self\">Commits, rollbacks, and transactions<\/a> and <a href=\"http:\/\/help.adobe.com\/en_US\/ColdFusion\/9.0\/Developing\/WS17433CEE-48E1-45ec-9034-3B3AE4892402.html\" target=\"_self\">Tags as functions and operators<\/a> in <i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">Developing ColdFusion Applications<\/i><br>","DESCRIPTION":"For enterprise database management systems that support transaction processing, instructs the database management system to treat multiple database operations as a single transaction. Provides database commit and rollback processing. See the documentation for your database management system to determine whether it supports SQL transaction processing.","LICENCE":"http:\/\/help.adobe.com\/en_US\/ColdFusion\/10.0\/LegalNotices\/index.html","EXAMPLE":"<!-- --><br>&lt;p&gt;The cftransaction tag can be used to group multiple queries that use  \r\nthe cfquery tag into one business event. Changes to data that is requested \r\nby the queries are not committed to the datasource until all actions within \r\nthe transaction block have executed successfully. \r\n&lt;p&gt;This a view-only example.  \r\n&lt;!---  \r\n&lt;cftransaction&gt; \r\n    &lt;cfquery name='makeNewCourse' datasource='Snippets'&gt; \r\n    INSERT INTO Courses \r\n        (Number, Descript) \r\n    VALUES \r\n        ('#myNumber#', '#myDescription#') \r\n    &lt;\/cfquery&gt; \r\n \r\n    &lt;cfquery name='insertNewCourseToList' datasource='Snippets'&gt; \r\n    INSERT INTO CourseList \r\n        (CorNumber, CorDesc, Dept_ID, \r\n        CorName, CorLevel, LastUpdate) \r\n    VALUES \r\n        ('#myNumber#', '#myDescription#', '#myDepartment#', \r\n        '#myDescription#', '#myCorLevel#', #Now()#) \r\n    &lt;\/cfquery&gt; \r\n&lt;\/cftransaction&gt;  \r\n---&gt;<br>You can set savepoints at the completion of insert, update, and delete actions of a transaction. You then use error handling logic to determine whether it is necessary to roll back to a previous savepoint.<br>","USAGE":"<!-- --><br>If you do not specify a value for the <samp class=\"codeph\">action<\/samp> attribute, automatic transaction processing proceeds as follows:<br><li><p>If the <samp class=\"codeph\">cfquery<\/samp> operations within the transaction block complete without an error, the transaction is committed.<\/p> <\/li> \n<li><p>If a <samp class=\"codeph\">cfquery<\/samp> tag generates an error within a <samp class=\"codeph\">cftransaction<\/samp> block, all <samp class=\"codeph\">cfquery<\/samp> operations in the transaction roll back.<\/p> <p>If you do not specify a value for the <samp class=\"codeph\">isolation<\/samp> attribute, ColdFusion uses the default isolation level for the associated database.<\/p> <p>By using CFML error handling and the <samp class=\"codeph\">action<\/samp> attribute, however, you can explicitly control whether a transaction is committed or rolled back, based on the success or failure of the database query. In a transaction block, you can do the following:<\/p> <\/li> \n<li><p>Commit a database transaction by nesting the <samp class=\"codeph\">&lt;cftransaction action = &quot;commit&quot;\/&gt;<\/samp> tag in the block.<\/p> <\/li> \n<li><p>Roll back a transaction by nesting the <samp class=\"codeph\">&lt;cftransaction action = &quot;rollback&quot;\/&gt;<\/samp> tag in the block.<\/p> <p>(In these examples, the slash is an alternate syntax that is the equivalent of an end tag.)<\/p> <p>In a transaction block, you can write queries to more than one database, but you must commit or roll back a transaction to one database before writing a query to another. <\/p> <p>To control how the database engine performs locking during the transaction, use the <samp class=\"codeph\">isolation<\/samp> attribute. <\/p> <p>The <samp class=\"codeph\">cftransaction<\/samp> tag does not work as expected if you use the <samp class=\"codeph\">cfthread<\/samp> tag in it to make query calls. <\/p> <\/li> \n<li><p>You can now nest cftransaction tags. Typically, ColdFusion 9 does not support nested transactions, but you can embed one cftransaction tag inside another. If you nest these tags, only the outermost cftransaction tag takes effect.<\/p> <p>This feature lets you write functions that must run in a transaction without considering whether the function is called by code that is inside a cftransaction tag. Use a cftransaction tag in the function. If the calling code is in a transaction, the tag has no effect. If the calling code is not in a transaction, the tag starts the transaction.<\/p> <p>The following code shows nested transaction tags. <\/p> <pre>&lt;cftransaction&gt; \r\n&lt;cfquery name=&quot;iquery&quot; datasource=&quot;dsn&quot;&gt; \r\ninsert into region(regionid, regiondescription) values('111', 'YPR') \r\n&lt;\/cfquery&gt; \r\n&lt;cftransaction&gt; \r\n&lt;cfquery name=&quot;iquery&quot; datasource=&quot;dsn&quot;&gt; \r\nupdate region set regiondescription = 'new' where regionid='111' \r\n&lt;\/cfquery&gt; \r\n&lt;\/cftransaction&gt; \r\n&lt;\/cftransaction&gt;<\/pre> \n <div class=\"note\">\n  <span class=\"notetitle\">Note: <\/span>In a realistic situation, the second cftransaction and cfquery can be written in a CFC that are, in turn, called by the first cftransaction and cfquery by passing the regionid value.\n <\/div> <\/li><br>","Attribute":[{"REQOROPT":"Optional","DESCRIPTION":"begin: The start of the block of code to execute. commit: Commits a pending transaction. rollback: Rolls back a pending transaction. setsavepoint: Saves a specific state within a transaction","default":"begin","Attribute":"action"},{"REQOROPT":"Optional","DESCRIPTION":"Isolation level, which indicates which type of read can occur during the execution of concurrent SQL transactions. The possible read actions include dirty read, in which a second SQL transaction reads a row before the first SQL transaction executes a COMMIT; non-repeatable read, in which a SQL transaction reads a row and then a second SQL transaction modifies or deletes the row and executes a COMMIT; and phantom, in which a SQL transaction reads rows that meet search criteria, a second SQL transaction then generates at least one row that meets the first transaction’s search criteria, and then the first transaction repeats the search, resulting in a different result set. read_uncommitted: Allows dirty read, non-repeatable read, and phantom read_committed: Allows non-repeatable read and phantom. Does not allow dirty read. repeatable_read: Allows phantom. Does not allow dirty read or non-repeatable read. serializable: Does not allow dirty read, non-repeatable read, or phantom.","default":"","Attribute":"isolation"},{"REQOROPT":"Optional","DESCRIPTION":"The name of the savepoint in the transaction. Setting savepoints lets you roll back portions of a transaction. For example, if your transaction includes an insert, an update, and a delete, and you set a savepoint after the update, you can roll back the transaction to exclude the delete.","default":"","Attribute":"savepoint"},{"REQOROPT":"Optional","DESCRIPTION":"This attribute specifies whether the cftransaction tag can be nested inside another cftransaction tag. If the attribute value is false and there is a parent cftransaction tag, ColdFusion generates an error.","default":true,"Attribute":"nested"}]}