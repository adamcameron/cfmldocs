{"HISTORY":"<!-- --><br>ColdFusion 8: Added the <samp class=\"codeph\">clientCert<\/samp> and <samp class=\"codeph\">clientCertPassword<\/samp> attributes.<br>ColdFusion MX 7.01: Added the “never” value of the <samp class=\"codeph\">getAsBinary<\/samp> attribute.<br>ColdFusion MX 7: Added the <samp class=\"codeph\">result<\/samp> attribute.<br>ColdFusion MX 6.1:<br><li><p>Added support for the following methods: HEAD, PUT, DELETE, OPTIONS, TRACE.<\/p> <\/li> \n<li><p>Added <samp class=\"codeph\">multipart<\/samp>, <samp class=\"codeph\">getAsBinary<\/samp>, <samp class=\"codeph\">proxyUser<\/samp>, and <samp class=\"codeph\">proxyPassword<\/samp> attributes.<\/p> <\/li> \n<li><p>Changed <samp class=\"codeph\">httpparam<\/samp> behavior: all operations can have <samp class=\"codeph\">httpparam<\/samp> tags.<\/p> <\/li> \n<li><p>Added the <samp class=\"codeph\">cfhttp.errorDetail<\/samp> return variable.<\/p> <\/li> \n<li><p>Modified response body content types considered to be text.<\/p> <\/li> \n<li><p>Changed behavior for multiple headers: multiple headers of the same type are returned in an array.<\/p> <\/li> \n<li><p>Added support for HTTPS proxy tunneling.<\/p> <\/li> \n<li><p>Fixed bugs in code and documentation.<\/p> <\/li><br>ColdFusion MX:<br><li><p>Added the <samp class=\"codeph\">charset<\/samp> and <samp class=\"codeph\">firstrowasheaders<\/samp> attributes. <\/p> <\/li> \n<li><p>Changed Secure Sockets Layer (SSL) support: ColdFusion uses the Sun JSSE library, which supports 128-bit encryption, to support SSL. <\/p> <\/li><br>","SYNTAX":"<!-- --><br>&lt;cfhttp  \r\n    url = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">server URL<\/i>&quot; \r\n    charset = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">character encoding<\/i>&quot; \r\n    clientCert = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">filename<\/i>&quot; \r\n    clientCertPassword = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">password<\/i>&quot; \r\n    columns = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">query columns<\/i>&quot; \r\n    delimiter = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">character<\/i>&quot; \r\n    file = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">filename<\/i>&quot; \r\n    firstrowasheaders = &quot;yes|no&quot; \r\n    getAsBinary = &quot;auto|yes|no|never&quot; \r\n    method = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">method name<\/i>&quot; \r\n    multipart = &quot;yes|no&quot; \r\n    name = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">query name<\/i>&quot; \r\n    password = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">password<\/i>&quot; \r\n    path = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">path<\/i>&quot; \r\n    port = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">port number<\/i>&quot; \r\n    proxyServer = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">host name<\/i>&quot; \r\n    proxyPort = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">port number<\/i>&quot; \r\n    proxyUser = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">username<\/i>&quot; \r\n    proxyPassword = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">password<\/i>&quot; \r\n    redirect = &quot;yes|no&quot; \r\n    resolveURL = &quot;yes|no&quot; \r\n    result = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">result name<\/i>&quot; \r\n    textQualifier = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">character<\/i>&quot; \r\n    throwOnError = &quot;yes|no&quot; \r\n    timeout = &quot;time-out period in seconds&quot; \r\n    username = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">username<\/i>&quot; \r\n    userAgent = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">user agent<\/i>&quot;&gt; \r\n \r\n    <i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">cfhttpparam tags [optional for some methods]<\/i> \r\n \r\n&lt;\/cfhttp&gt;<br><span class=\"notetitle\">Note: <\/span>You can specify this tag’s attributes in an \n<samp class=\"codeph\">attributeCollection<\/samp> attribute whose value is a structure. Specify the structure name in the \n<samp class=\"codeph\">attributeCollection<\/samp> attribute and use the tag’s attribute names as structure keys.<br>","CATEGORY":"Internet protocol tags","PAGENAME":"cfhttp","SEEALSO":"<!-- --><br><samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7d85.html\">cfhttpparam<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7c11.html\">GetHttpRequestData<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7c7d.html\">cfftp<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7f97.html\">cfldap<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7f8e.html\">cfmail<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7f96.html\">cfpop<\/a><\/samp><br>","DESCRIPTION":"Generates an HTTP request and handles the response from the server.","LICENCE":"http:\/\/help.adobe.com\/en_US\/ColdFusion\/10.0\/LegalNotices\/index.html","EXAMPLE":"<!-- --><br>&lt;!--- This example displays the information provided by  \r\n    the Designer &amp; Developer Center XML feed, \r\n    http:\/\/www.adobe.com\/devnet\/resources\/_resources.xml  \r\n    See http:\/\/www.adobe.com\/devnet\/articles\/xml_resource_feed.html  \r\n    for more information on this feed. ---&gt; \r\n \r\n&lt;!--- Set the URL address. ---&gt; \r\n&lt;cfset urlAddress=&quot;http:\/\/www.adobe.com\/devnet\/resources\/_resources.xml&quot;&gt; \r\n \r\n&lt;!--- Use the CFHTTP tag to get the file content represented by urladdress.  \r\n        Note that \/&gt;, not an end tag, terminates this tag. ---&gt; \r\n&lt;cfhttp url=&quot;#urladdress#&quot; method=&quot;GET&quot; resolveurl=&quot;Yes&quot; throwOnError=&quot;Yes&quot;\/&gt; \r\n \r\n&lt;!--- Parse the XML and output a list of resources. ---&gt; \r\n&lt;cfset xmlDoc = XmlParse(CFHTTP.FileContent)&gt; \r\n&lt;!--- Get the array of resource elements, the xmlChildren of the xmlroot. ---&gt; \r\n&lt;cfset resources=xmlDoc.xmlroot.xmlChildren&gt; \r\n&lt;cfset numresources=ArrayLen(resources)&gt; \r\n \r\n&lt;cfloop index=&quot;i&quot; from=&quot;1&quot; to=&quot;#numresources#&quot;&gt; \r\n    &lt;cfset item=resources[i]&gt; \r\n    &lt;cfoutput&gt; \r\n        &lt;strong&gt;&lt;a href=#item.url.xmltext#&gt;#item.title.xmltext#&lt;\/strong&gt;&lt;\/a&gt;&lt;br&gt; \r\n        &lt;strong&gt;Author&lt;\/strong&gt;&amp;nbsp;&amp;nbsp;#item.author.xmltext#&lt;br&gt; \r\n        &lt;strong&gt;Applies to these products&lt;\/strong&gt;&lt;br&gt; \r\n        &lt;cfloop index=&quot;i&quot; from=&quot;4&quot; to=&quot;#arraylen(item.xmlChildren)#&quot;&gt; \r\n            #item.xmlChildren[i].xmlAttributes.Name#&lt;br&gt; \r\n        &lt;\/cfloop&gt; \r\n        &lt;br&gt; \r\n    &lt;\/cfoutput&gt; \r\n&lt;\/cfloop&gt;<br>","USAGE":"<!-- --><br>The <samp class=\"codeph\">cfhttp<\/samp> tag is a general-purpose tool for creating HTTP requests and handling the returned results. It enables you to generate most standard HTTP request types. You use embedded <samp class=\"codeph\">cfhttpparam<\/samp> tags to specify request headers and body content.<br>When ColdFusion receives a response to a <samp class=\"codeph\">cfhttp<\/samp> request, it can put the response body (if any) in a file or the <samp class=\"codeph\">cfhttp.FileContent <\/samp>string variable. If the body text is structured as a result set, ColdFusion can put the body text in query object. You can also access the values of all returned headers and specify how to handle error status and redirections, and specify a time-out to prevent requests from hanging.<br>The HTTP protocol is the backbone of the World Wide Web and is used for every web transaction. Because the <samp class=\"codeph\">cfhttp<\/samp> tag can generate most types of requests, it provides significant flexibility. Possible uses include:<br><li><p>Interacting with dynamic web sites and services that are not available as web services. (Use the <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7e0a.html\">cfinvoke<\/a><\/samp> tag to access SOAP web services.)<\/p> <\/li> \n<li><p>Getting the contents of an HTML page or other file such as an image on a web server for use in your CFML page or storage in a file.<\/p> <\/li> \n<li><p>Sending a secure request to a server by specifying the https protocol in the <samp class=\"codeph\">url<\/samp> attribute.<\/p> <\/li> \n<li><p>Using the POST method to send a multipart\/form-data style post to any URL that can handle such data and return results, including CGI executables or even other ColdFusion pages.<\/p> <\/li> \n<li><p>Using the PUT method to upload files to a server that does not accept FTP requests.<\/p> <\/li><br>This tag can, and for PUT and POST requests must, have a body that contains <samp class=\"codeph\">cfhttpparam<\/samp> tags. If this tag has <samp class=\"codeph\">cfhttpparam<\/samp> tags, it must have a <samp class=\"codeph\">&lt;\/cfhttp&gt;<\/samp> end tag.<br>To use HTTPS with the <samp class=\"codeph\">cfhttp<\/samp> tag, you might need to manually import the certificate for each web server into the keystore for the JRE that ColdFusion uses. This procedure should not be necessary if the certificate is signed (issued) by an authority that the JSSE (Java Secure Sockets Extension) recognizes (for example, Verisign); that is, if the signing authority is in the cacerts already. However, you might need to use the procedure if you are issuing SSL (secure sockets layer) certificates yourself.<br>","Attribute":[{"REQOROPT":"Required","DESCRIPTION":"Address of the resource on the server that handles the request. The URL must include the hostname or IP address. If you do not specify the transaction protocol (http:\/\/ or https:\/\/), ColdFusion uses the default protocol, http. If you specify a port number in this attribute, it overrides any port attribute value. The cfhttpparam tag URL attribute appends query string attribute-value pairs to the URL.","default":"Uses the http protocol","Attribute":"url"},{"REQOROPT":"Optional","DESCRIPTION":"The character encoding of the request, including the URL query string and form or file data, and the response. The following list includes commonly used values: utf-8 iso-8859-1 windows-1252 us-ascii shift_jis iso-2022-jp euc-jp euc-kr big5 euc-cn utf-16 For more information character encodings, see www.w3.org\/International\/O-charset.html.","default":"For request: UTF-8 For response: charset specified by response Content- Type header, or UTF-8 if response does not specify charset.","Attribute":"charset"},{"REQOROPT":"Optional","DESCRIPTION":"The full path to a PKCS12 format file that contains the client certificate for the request.","default":"","Attribute":"clientCert"},{"REQOROPT":"Optional","DESCRIPTION":"Password used to decrypt the client certificate.","default":"","Attribute":"clientCertPassword"},{"REQOROPT":"Optional","DESCRIPTION":"The target webserver’s compression status. The only supported value is none. If the target website runs on IIS with HTTP compression enabled, use this attribute to avoid a connection failure while performing GET or POST operations.","default":" ","Attribute":"compression"},{"REQOROPT":"Optional","DESCRIPTION":"no: if ColdFusion does not recognize the response body type as text, converts it to a ColdFusion object. auto: if ColdFusion does not recognize the response body type as text, converts it to ColdFusion Binary type data. yes: always converts the response body content into ColdFusion Binary type data, even if ColdFusion recognizes the response body type as text. never: prevents the automatic conversion of certain MIME types to the ColdFusion Binary type data; treats the returned content as text. ColdFusion recognizes the response body as text if: the header does not specify a content type. the content type starts with \"text\". the content type starts with \"message\". the content type is \"application\/octet-stream\". If ColdFusion does not recognize the body as text and converts it to an object, but the body consists of text, the cfoutput tag can display it. The cfoutput tag cannot display Binary type data. (To convert binary data to text, use the ToString function.)","default":false,"Attribute":"getAsBinary"},{"REQOROPT":"Optional","DESCRIPTION":"GET: requests information from the server. Any data that the server requires to identify the requested information must be in the URL or in cfhttptype=\"URL\" tags. POST: sends information to the server for processing. Requires one or more cfhttpparam tags. Often used for submitting form-like data. PUT: requests the server to store the message body at the specified URL. Use this method to send files to the server. DELETE: requests the server to delete the specified URL. HEAD: identical to the GET method, but the server does not send a message body in the response. Use this method for testing hypertext links for validity and accessibility, determining the type or modification time of a document, or determining the type of server. TRACE: requests that the server echo the received HTTP headers back to the sender in the response body. Trace requests cannot have bodies. This method enables the ColdFusion application to see what is being received at the server, and use that data for testing or diagnostic information. OPTIONS: a request for information about the communication options available for the server or the specified URL. This method enables the ColdFusion application to determine the options and requirements associated with a URL, or the capabilities of a server, without requesting any additional activity by the server.","default":"GET","Attribute":"method"},{"REQOROPT":"Optional","DESCRIPTION":"Use to pass a password to the target URL for Basic Authentication. Combined with username to form a base64 encoded string that is passed in the Authenticate header. Does not provide support for Integrated Windows, NTLM, or Kerebos authentication.","default":"","Attribute":"password"},{"REQOROPT":"Optional","DESCRIPTION":"Port number on the server to which to send the request. A port value in the url attribute overrides this value.","default":"80 for http 443 for https","Attribute":"port"},{"REQOROPT":"Optional","DESCRIPTION":"Host name or IP address of a proxy server to which to send the request.","default":"","Attribute":"proxyServer"},{"REQOROPT":"Optional","DESCRIPTION":"Port number to use on the proxy server.","default":80,"Attribute":"proxyPort"},{"REQOROPT":"Optional","DESCRIPTION":"User name to provide to the proxy server.","default":"","Attribute":"proxyUser"},{"REQOROPT":"Optional","DESCRIPTION":"Password to provide to the proxy server.","default":"","Attribute":"proxyPassword"},{"REQOROPT":"Optional","DESCRIPTION":"If the response header includes a Location field AND ColdFusion receives a 300-series (redirection) status code, specifies whether to redirect execution to the URL specified in the field: yes: redirects execution to the specified page. no: stops execution and returns the response information in the cfhttp variable, or throws an error if the throwOnError attribute is True. The cfhttp.responseHeader.Location variable contains the redirection path. ColdFusion follows a maximum of four redirects on a request. If there are more, ColdFusion functions as if redirect = \"no\". Note: The cflocation tag generates an HTTP 302 response with the url attribute as the Location header value.","default":true,"Attribute":"redirect"},{"REQOROPT":"Optional","DESCRIPTION":"no: does not resolve URLs in the response body. As a result, any relative URL links in the response body do not work. yes: resolves URLs in the response body to absolute URLs, including the port number, so that links in a retrieved page remain functional. Applies to these HTML tags: img src a href form action applet code script src embed src embed pluginspace body background frame src bgsound src object data object classid object codebase object usemap Does not resolve URLs if the file and path attributes are used.","default":false,"Attribute":"resolveURL"},{"REQOROPT":"Optional","DESCRIPTION":"Lets you specify an alternate variable in which to receive a result.","default":" ","Attribute":"result"},{"REQOROPT":"Optional","DESCRIPTION":"yes: if the server returns an error response code, throws an exception that can be caught using the cftry and cfcatch or ColdFusion error pages. no: does not throw an exception if an error response is returned. In this case, your application can use the cfhttp.StatusCode variable to determine if there was an error and its cause.","default":false,"Attribute":"throwOnError"},{"REQOROPT":"Optional","DESCRIPTION":"Value, in seconds, that is the maximum time the request can take. If the time-out passes without a response, ColdFusion considers the request to have failed. If the client specifies a time-out in the URL search parameter (for example, ?RequestTime=120) ColdFusion uses the lesser of the URL time-out and the timeout attribute value; this ensures that the request times out before, or at the same time as, the page. If the URL does not specify a time-out, ColdFusion uses the lesser of the Administrator time-out and the timeout attribute value. If the time-out is not set in any of these, ColdFusion waits indefinitely for the cfhttp request to process.","default":"","Attribute":"timeout"},{"REQOROPT":"Optional","DESCRIPTION":"Text to put in the user agent request header. Used to identify the request client software. Can make the ColdFusion application appear to be a browser.","default":"ColdFusion","Attribute":"userAgent"},{"REQOROPT":"Optional","DESCRIPTION":"Use to pass a user name to the target URL for Basic Authentication. Combined with password to form a base64 encoded string that is passed in the Authenticate header. Does not provide support for Integrated Windows, NTLM, or Kerberos authentication.","default":"","Attribute":"username"},{"REQOROPT":"Optional","DESCRIPTION":"Tells ColdFusion to send all data specified by cfhttpparam type=\"formField\" tags as multipart form data, with a Content-Type of multipart\/form-data. By default, ColdFusion sends cfhttp requests that contain only formField data with a Content Type of application\/x-www-form-urlencoded. (If the request also includes File type data, ColdFusion uses the multipart\/form-data content type for all parts.) If yes, ColdFusion also sends the request’s charset in each Content-Type description. All form field data must be encoded in this character encoding, and ColdFusion does not URLEncode the data. (The field name must be in ISO-88591-1 or ASCII.) Some http parsers, including the one used by previous versions of ColdFusion, ignore the multipart form field character encoding description.","default":"no (Sends as multipart only if request includes File type data.)","Attribute":"multipart"},{"REQOROPT":"Optional","DESCRIPTION":"Allows you to set the multipart header field to related or form-data. By default, the value is form-data.","default":"form-data","Attribute":"multipartType"},{"REQOROPT":"Optional","DESCRIPTION":"Specifies the name of the variable in which you want the result returned.","default":"","Attribute":"result"},{"REQOROPT":"Required if path is specified and not a GET method","DESCRIPTION":"Name of the file in which to store the response body. For a GET operation, the default is the file requested in the URL, if there is one. For example, if the URL in a GET method is http:www.myco.com\/test.htm, the default file is test.htm. Do not specify the path to the directory in this attribute; use the path attribute.","default":"See Description","Attribute":"file"},{"REQOROPT":"Required if file is specified.","DESCRIPTION":"Tells ColdFusion to save the HTTP response body in a file. Contains the absolute path to the directory in which to store the file.","default":"","Attribute":"path"},{"REQOROPT":"Optional","DESCRIPTION":"The column names for the query, separated by commas, with no spaces. Column names must start with a letter. The remaining characters can be letters, numbers, or underscore characters (_). If there are no column name headers in the response, specify this attribute to identify the column names. If you specify this attribute, and the firstrowasHeader attribute is True (the default), the column names specified by this attribute replace the first line of the response. You can use this behavior to replace the column names retrieved by the request with your own names. If a duplicate column heading is encountered in either this attribute or in the column names from the response, ColdFusion appends an underscore to the name to make it unique. If the number of columns specified by this attribute does not equal the number of columns in the HTTP response body, ColdFusion generates an error.","default":"First row of response contains column names.","Attribute":"columns"},{"REQOROPT":"Optional","DESCRIPTION":"A character that separates query columns. The response body must use this character to separate the query columns.","default":", (comma)","Attribute":"delimiter"},{"REQOROPT":"Optional","DESCRIPTION":"Determines how ColdFusion processes the first row of the query record set: yes: processes the first row as column heads. If you specify a columns attribute, ColdFusion ignores the first row of the file. no: processes the first row as data. If you do not specify a columns attribute, ColdFusion generates column names by appending numbers to the word \"column\"; for example, \"column_1\".","default":true,"Attribute":"firstrowasheaders"},{"REQOROPT":"Optional","DESCRIPTION":"Tells ColdFusion to create a query object with the given name from the returned HTTP response body.","default":"","Attribute":"name"},{"REQOROPT":"Optional","DESCRIPTION":"A character that, optionally, specifies the start and end of a text column. This character must surround any text fields in the response body that contain the delimiter character as part of the field value. To include this character in column text, escape it by using two characters in place of one. For example, if the qualifier is a double-quotation mark, escape it as \"\".","default":"\" [double-quotation mark]","Attribute":"textQualifier"}]}