{"HISTORY":"<!-- --><br>ColdFusion 8: Added function<br>","SYNTAX":"<!-- --><br>SerializeJSON(<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">var<\/i>[, <i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">serializeQueryByColumns<\/i>])<br>","CATEGORY":"Conversion functions","PAGENAME":"SerializeJSON","SEEALSO":"<!-- --><br><samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-79e4.html\">DeserializeJSON<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-79e3.html\">IsJSON<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-79f9.html\">cfajaxproxy<\/a><\/samp>, <a href=\"http:\/\/help.adobe.com\/en_US\/ColdFusion\/9.0\/Developing\/WSc3ff6d0ea77859461172e0811cbec22c24-626a.html\" target=\"_self\">Using data interchange formats<\/a> in the <i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">Developing ColdFusion Applications<\/i>, http:\/\/www.json.org<br>","DESCRIPTION":"Converts ColdFusion data into a JSON (JavaScript Object Notation) representation of the data.","LICENCE":"http:\/\/help.adobe.com\/en_US\/ColdFusion\/10.0\/LegalNotices\/index.html","EXAMPLE":"<!-- --><br>This example creates a JSON-format data feed with simple weather data for two cities. The data feed is in the form of a JavaScript application that consists of a single function call that has a JSON Object as its parameter. The example code does the following:<br><li><p>Creates a query object with two rows of weather data. Each row has a city, the current temperature, and an array of forecast structures, with each with the high, low, and weather prediction for one day. Normally, datasource provides the data; to keep the example simple, the example uses the same prediction for all cites and days.<\/p> <\/li> \n<li><p>Converts the query to a JSON format string and surrounds it in a JavaScript function call.<\/p> <\/li> \n<li><p>Writes the result to the output.<\/p> <\/li><br>If you view this page in your browser, you see the resulting JavaScript function and JSON parameter. To use the results of this page in an application, put this file and the example for the <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-79e4.html\">DeserializeJSON<\/a><\/samp> function in an appropriate location under your ColdFusion web root, replace the URL in the <samp class=\"codeph\">DeserializeJSON<\/samp> example code with the correct URL for this page, and run the <samp class=\"codeph\">DeserializeJSON<\/samp> example.<br>&lt;!--- Generate a clean feed by suppressing white space and debugging \r\n         information. ---&gt; \r\n&lt;cfprocessingdirective suppresswhitespace=&quot;yes&quot;&gt; \r\n&lt;cfsetting showdebugoutput=&quot;no&quot;&gt; \r\n&lt;!--- Generate the JSON feed as a JavaScript function. ---&gt; \r\n&lt;cfcontent type=&quot;application\/x-javascript&quot;&gt; \r\n \r\n&lt;cfscript&gt; \r\n    \/\/ Construct a weather query with information on cities. \r\n    \/\/ To simplify the code, we use the same weather for all cities and days. \r\n    \/\/ Normally this information would come from a data source. \r\n    weatherQuery = QueryNew(&quot;City, Temp, Forecasts&quot;); \r\n    QueryAddRow(weatherQuery, 2); \r\n    theWeather=StructNew(); \r\n    theWeather.High=73; \r\n    theWeather.Low=53; \r\n    theWeather.Weather=&quot;Partly Cloudy&quot;; \r\n    weatherArray=ArrayNew(1); \r\n    for (i=1; i&lt;=5; i++) weatherArray[i]=theWeather; \r\n    querySetCell(weatherQuery, &quot;City&quot;, &quot;Newton&quot;, 1); \r\n    querySetCell(weatherQuery, &quot;Temp&quot;, &quot;65&quot;, 1); \r\n    querySetCell(weatherQuery, &quot;ForeCasts&quot;, weatherArray, 1); \r\n    querySetCell(weatherQuery, &quot;City&quot;, &quot;San Jose&quot;, 2); \r\n    querySetCell(weatherQuery, &quot;Temp&quot;, 75, 2); \r\n    querySetCell(weatherQuery, &quot;ForeCasts&quot;, weatherArray, 2); \r\n \r\n    \/\/ Convert the query to JSON. \r\n    \/\/ The SerializeJSON function serializes a ColdFusion query into a JSON \r\n    \/\/ structure. \r\n    <strong>theJSON = SerializeJSON(weatherQuery);<\/strong> \r\n     \r\n    \/\/ Wrap the JSON object in a JavaScript function call. \r\n    \/\/ This makes it easy to use it directly in JavaScript. \r\n    writeOutput(&quot;onLoad( &quot;&amp;theJSON&amp;&quot; )&quot;); \r\n&lt;\/cfscript&gt; \r\n&lt;\/cfprocessingdirective&gt;<br>","USAGE":"<!-- --><br>This function is useful for generating JSON format data to be consumed by an Ajax application.<br>The <samp class=\"codeph\">SerializeJSON<\/samp> function converts ColdFusion dates and times into strings that can be easily parsed by the JavaScript <samp class=\"codeph\">Date<\/samp> object. The strings have the following format:<br>MonthName, DayNumber Year Hours:Minutes:Seconds<br>The <samp class=\"codeph\">SerializeJSON<\/samp> function converts the ColdFusion date time object for October 3, 2007 at 3:01 PM, for example, into the JSON string “October, 03 2007 15:01:00”.<br>The <samp class=\"codeph\">SerializeJSON<\/samp> function with a <samp class=\"codeph\">false<\/samp><samp class=\"codeph\">serializeQueryByColumns<\/samp> parameter (the default) converts a ColdFusion query into a row-oriented JSON Object with the following elements:<br><table border=\"1\" cellpadding=\"4\" cellspacing=\"0\">\n <thead align=\"left\">\n  <tr>\n   <th valign=\"top\" width=\"NaN%\" id=\"d17e158985\"><p>Element<\/p> <\/th> \n   <th valign=\"top\" width=\"NaN%\" id=\"d17e158988\"><p>Description<\/p> <\/th> \n  <\/tr> \n <\/thead> \n <tbody>\n  <tr>\n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e158985 \"><p>COLUMNS<\/p> <\/td> \n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e158988 \"><p>An array of the names of the columns.<\/p> <\/td> \n  <\/tr> \n  <tr>\n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e158985 \"><p>DATA<\/p> <\/td> \n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e158988 \"><p>A two-dimensional array, where:<\/p> \n    <div class=\"para\">\n     <ul>\n      <li><p>Each entry in the outer array corresponds to a row of query data.<\/p> <\/li> \n      <li><p>Each entry in the inner arrays is a column field value in the row, in the same order as the <samp class=\"codeph\">COLUMNS<\/samp> array entries.<\/p> <\/li> \n     <\/ul> \n    <\/div> <\/td> \n  <\/tr> \n <\/tbody> \n<\/table><br>For example, the <samp class=\"codeph\">SerializeJSON<\/samp> function with a <samp class=\"codeph\">serializeQueryByColumns<\/samp> parameter value of <samp class=\"codeph\">false<\/samp> converts a ColdFusion query with two columns, City, and State, and two rows of data into following format:<br>{&quot;COLUMNS&quot;:[&quot;CITY&quot;,&quot;STATE&quot;],&quot;DATA&quot;:[[&quot;Newton&quot;,&quot;MA&quot;],[&quot;San Jose&quot;,&quot;CA&quot;]]}<br>The <samp class=\"codeph\">SerializeJSON<\/samp> function with a <samp class=\"codeph\">serializeQueryByColumns<\/samp> parameter value of <samp class=\"codeph\">true<\/samp> converts a ColdFusion query into a column-oriented JSON Object that is equivalent to the WDDX query representation. The JSON Object has three elements:<br><table border=\"1\" cellpadding=\"4\" cellspacing=\"0\">\n <thead align=\"left\">\n  <tr>\n   <th valign=\"top\" width=\"NaN%\" id=\"d17e159047\"><p>Element<\/p> <\/th> \n   <th valign=\"top\" width=\"NaN%\" id=\"d17e159050\"><p>Description<\/p> <\/th> \n  <\/tr> \n <\/thead> \n <tbody>\n  <tr>\n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e159047 \"><p>ROWCOUNT<\/p> <\/td> \n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e159050 \"><p>The number of rows in the query.<\/p> <\/td> \n  <\/tr> \n  <tr>\n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e159047 \"><p>COLUMNS<\/p> <\/td> \n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e159050 \"><p>An array of the names of the columns.<\/p> <\/td> \n  <\/tr> \n  <tr>\n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e159047 \"><p>DATA<\/p> <\/td> \n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e159050 \"><p>An Object with the following:<\/p> \n    <div class=\"para\">\n     <ul>\n      <li><p>The keys are the query column names<\/p> <\/li> \n      <li><p>The values are arrays that contain the column data<\/p> <\/li> \n     <\/ul> \n    <\/div> <\/td> \n  <\/tr> \n <\/tbody> \n<\/table><br>The <samp class=\"codeph\">SerializeJSON<\/samp> function with a <samp class=\"codeph\">serializeQueryByColumns<\/samp> parameter value of <samp class=\"codeph\">true<\/samp> converts a ColdFusion query with two columns, City, and State, and two rows of data into following format:<br>{&quot;ROWCOUNT&quot;:2, &quot;COLUMNS&quot;:[&quot;CITY&quot;,&quot;STATE&quot;],&quot;DATA&quot;:{&quot;City&quot;:[&quot;Newton&quot;,&quot;San Jose&quot;],&quot;State&quot;:[&quot;MA&quot;,&quot;CA&quot;]}}<br><span class=\"notetitle\">Note: <\/span>The \n<samp class=\"codeph\">SerializeJSON<\/samp> function generates an error if you try to convert binary data into JSON format.<br>The <samp class=\"codeph\">SerializeJSON<\/samp> function converts all other ColdFusion data types to the corresponding JSON types. It converts structures to JSON Objects, arrays to JSON Arrays, numbers to JSON Numbers, and strings to JSON Strings.<br><span class=\"notetitle\">Note: <\/span>ColdFusion internally represents structure key names using all-uppercase characters, and, therefore, serializes the key names to all-uppercase JSON representations. Any JavaScript that handles JSON representations of ColdFusion structures must use all-uppercase structure key names, such as CITY or STATE. You also use the all-uppercase names \n<samp class=\"codeph\">COLUMNS<\/samp> and \n<samp class=\"codeph\">DATA<\/samp> as the keys for the two arrays that represent ColdFusion queries in JSON format.<br>","Parameter":[{"DESCRIPTION":"A ColdFusion data value or variable that represents one.","Parameter":"var"},{"DESCRIPTION":"A Boolean value that specifies how to serialize ColdFusion queries. false (the default): Creates an object with two entries: an array of column names and an array of row arrays. This format is required by the HTML format cfgrid tag. true: Creates an object that corresponds to WDDX query format. For more information, see the Usage section.","Parameter":"serializeQueryByColumns"}]}