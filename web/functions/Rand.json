{"HISTORY":"<!-- --><br>ColdFusion MX 7: Added the <i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">algorithm<\/i> parameter.<br>","SYNTAX":"<!-- --><br>Rand([<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">algorithm<\/i>])<br>","CATEGORY":"Mathematical functions, Security functions","PAGENAME":"Rand","SEEALSO":"<!-- --><br><samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-6d3e.html\">Randomize<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7af3.html\">RandRange<\/a><\/samp><br>","DESCRIPTION":"Generates a pseudo-random number.","LICENCE":"http:\/\/help.adobe.com\/en_US\/ColdFusion\/10.0\/LegalNotices\/index.html","EXAMPLE":"<!-- --><br>The following example uses the SHA1PRNG algorithm to generate a single random number:<br>&lt;h3&gt;Rand Example&lt;\/h3&gt; \r\n&lt;cfoutput&gt; \r\n    &lt;p&gt;Rand(&quot;SHA1PRNG&quot;) returned: #Rand(&quot;SHA1PRNG&quot;)#&lt;\/p&gt; \r\n    &lt;p&gt;&lt;A HREF = &quot;#CGI.SCRIPT_NAME#&quot;&gt;Try again&lt;\/A&gt; \r\n&lt;\/cfoutput&gt;<br>","USAGE":"<!-- --><br>Call the <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-6d3e.html\">Randomize<\/a><\/samp> function before calling this function to seed the random number generator. Seeding the generator ensures that the <samp class=\"codeph\">Rand<\/samp> function always generates the same sequence of pseudo-random numbers. This behavior is useful if you must reproduce a pattern consistently.<br>ColdFusion MX uses the Java Cryptography Extension (JCE) and installs a Sun Java 1.4.2 runtime that includes the Sun JCE default security provider. This provider includes the algorithms listed in the Parameters section (except the default algorithm). The JCE framework includes facilities for using other provider implementations; however, cannot provide technical support for third-party security providers.<br>","Parameter":[{"DESCRIPTION":"(Optional) The algorithm to use to generate the random number. ColdFusion installs a cryptography library with the following algorithms: CFMX_COMPAT: the algorithm used in ColdFusion (default). SHA1PRNG: generates a number using the Sun Java SHA1PRNG algorithm. This algorithm provides greater randomness than the default algorithm IBMSecureRandom: for IBM WebSphere (IBM JVM does not support the SHA1PRNG algorithm).","Parameter":"algorithm"}]}