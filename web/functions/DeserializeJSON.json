{"HISTORY":"<!-- --><br>ColdFusion 8: Added this function<br>","SYNTAX":"<!-- --><br>DeserializeJSON(<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">JSONVar<\/i>[, <i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">strictMapping<\/i>])<br>","CATEGORY":"Conversion functions","PAGENAME":"DeserializeJSON","SEEALSO":"<!-- --><br><samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-79e3.html\">IsJSON<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-79fa.html\">SerializeJSON<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-79f9.html\">cfajaxproxy<\/a><\/samp>, <a href=\"http:\/\/help.adobe.com\/en_US\/ColdFusion\/9.0\/Developing\/WSc3ff6d0ea77859461172e0811cbec22c24-7a27.html\" target=\"_self\">Using Ajax Data and Development Features<\/a> in the <i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">Developing ColdFusion Applications<\/i>, http:\/\/www.json.org<br>","DESCRIPTION":"Converts a JSON (JavaScript Object Notation) string data representation into CFML data, such as a CFML structure or array.","LICENCE":"http:\/\/help.adobe.com\/en_US\/ColdFusion\/10.0\/LegalNotices\/index.html","EXAMPLE":"<!-- --><br>This example displays weather information from a JSON-format data feed that is generated by the example for the <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-79fa.html\">SerializeJSON<\/a><\/samp> function. Similar code might consume data that is exported as a JavaScript page. The feed is in the form of a JavaScript function call where the parameter is a JSON string that contains the feed data. The example does the following operations:<br><li><p>Uses a <samp class=\"codeph\">cfhttp<\/samp> tag to get the feed (in the <samp class=\"codeph\">cfhttp.fileContent<\/samp> variable).<\/p> <\/li> \n<li><p>Strips the function call wrapper from the text.<\/p> <\/li> \n<li><p>Uses the <samp class=\"codeph\">IsJSON<\/samp> function to check whether the result of the previous step is a valid JSON format string. If it is not, it displays a message and stops processing.<\/p> <\/li> \n<li><p>If the string is valid JSON text, uses the <samp class=\"codeph\">DeserializeJSON<\/samp> function to convert the string to a ColdFusion variable; in this case, a structure that contains two arrays that represent a ColdFusion query. The first array has the query column names, the second has the query data.<\/p> <\/li> \n<li><p>Parses the object and displays the contents of its arrays.<\/p> <\/li><br>To run this example, put this file and the example for the <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-79fa.html\">SerializeJSON<\/a><\/samp> function in an appropriate location under your ColdFusion web root, replace the URL with the correct URL for the serialization example, and run this page.<br>&lt;!--- Get the JSON Feed ---&gt; \r\n&lt;cfhttp url=&quot;http:\/\/localhost:8500\/My_Stuff\/Ajax\/Books\/CreateJSON_NEW.cfm&quot;&gt; \r\n \r\n&lt;!--- JSON data is sometimes distributed as a JavaScript function. \r\n     The following REReplace functions strip the function wrapper. ---&gt; \r\n&lt;cfset theData=REReplace(cfhttp.FileContent,  \r\n        &quot;^\\s*[[:word:]]*\\s*\\(\\s*&quot;,&quot;&quot;)&gt; \r\n&lt;cfset theData=REReplace(theData, &quot;\\s*\\)\\s*$&quot;, &quot;&quot;)&gt; \r\n \r\n&lt;!--- Test to make sure you have JSON data. ---&gt; \r\n&lt;cfif !IsJSON(theData)&gt; \r\n    &lt;h3&gt;The URL you requested does not provide valid JSON&lt;\/h3&gt; \r\n    &lt;cfdump var=&quot;#theData#&quot;&gt; \r\n \r\n&lt;!--- If the data is in JSON format, deserialize it. ---&gt; \r\n&lt;cfelse&gt; \r\n    <strong>&lt;cfset cfData=DeserializeJSON(theData)&gt;<\/strong> \r\n    &lt;!--- Parse the resulting array or structure and display the data. \r\n             In this case, the data represents a ColdFusion query that has been \r\n             serialized by the SerializeJSON function into a JSON structure with \r\n             two arrays: an array column names, and an array of arrays,  \r\n             where the outer array rows correspond to the query rows, and the \r\n             inner array entries correspond to the column fields in the row. ---&gt; \r\n    &lt;!--- First, find the positions of the columns in the data array. ---&gt; \r\n    &lt;cfset colList=ArrayToList(cfData.COLUMNS)&gt; \r\n    &lt;cfset cityIdx=ListFind(colList, &quot;City&quot;)&gt; \r\n    &lt;cfset tempIdx=ListFind(colList, &quot;Temp&quot;)&gt; \r\n    &lt;cfset fcstIdx=ListFind(colList, &quot;Forecasts&quot;)&gt; \r\n    &lt;!--- Now iterate through the DATA array and display the data. ---&gt; \r\n    &lt;cfoutput&gt; \r\n        &lt;cfloop index=&quot;i&quot; from=&quot;1&quot; to=&quot;#ArrayLen(cfData.DATA)#&quot;&gt; \r\n            &lt;h3&gt;#cfData.DATA[i][cityIdx]#&lt;\/h3&gt; \r\n            Current Temperature: #cfData.DATA[i][tempIdx]#&lt;br&gt;&lt;br&gt; \r\n            &lt;b&gt;Forecasts&lt;\/b&gt;&lt;br&gt;&lt;br&gt;         \r\n            &lt;cfloop index=&quot;j&quot; from=&quot;1&quot; to=&quot;#ArrayLen(cfData.DATA[i][fcstIdx])#&quot;&gt; \r\n                &lt;b&gt;Day #j#&lt;\/b&gt;&lt;br&gt; \r\n                Outlook: #cfData.DATA[i][fcstIdx][j].WEATHER#&lt;br&gt; \r\n                High: #cfData.DATA[i][fcstIdx][j].HIGH#&lt;br&gt; \r\n                Low: #cfData.DATA[i][fcstIdx][j].LOW#&lt;br&gt;&lt;br&gt; \r\n            &lt;\/cfloop&gt; \r\n        &lt;\/cfloop&gt; \r\n    &lt;\/cfoutput&gt; \r\n&lt;\/cfif&gt;<br>","USAGE":"<!-- --><br>This function is useful any time a ColdFusion page receives data as JSON strings. It is useful in ColdFusion applications that use Ajax to represent data on the client browser, and lets you consume on the server JSON format data from the client-side Ajax JavaScript. You can also use it on pages that get data from services that supply data as JavaScript function calls with JSON parameters; the example shows this use case.<br>The <samp class=\"codeph\">DeserializeJSON<\/samp> function converts each JSON data type directly into the equivalent ColdFusion data type, as follows:<br><li><p>If the <samp class=\"codeph\">strictMapping<\/samp> parameter is <samp class=\"codeph\">true<\/samp> (the default), all JSON objects become CFML structures.<\/p> <\/li> \n<li><p>If the <samp class=\"codeph\">strictMapping<\/samp> parameter is <samp class=\"codeph\">false<\/samp>, ColdFusion determines if JSON objects represent queries and, if so, converts them to ColdFusion query object. All other JSON objects become ColdFusion structures. The <samp class=\"codeph\">DeserializeJSON<\/samp> function recognizes a JSON structure as a query and converts it properly if the structure uses either of the two query representation formats described in the <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-79fa.html\">SerializeJSON<\/a><\/samp> reference.<\/p> <\/li> \n<li><p>JSON Arrays, Strings, and Numbers become ColdFusion arrays, strings, and numbers.<\/p> <\/li> \n<li><p>The JSON <samp class=\"codeph\">null<\/samp> value becomes the string <samp class=\"codeph\">null<\/samp>. <\/p> <\/li> \n<li><p>JSON string representations of a dates and times remain strings, but ColdFusion date\/time handling code can recognize them as representing dates and times.<\/p> <\/li><br>","Parameter":[{"DESCRIPTION":"A string that contains a valid JSON construct, or variable that represents one.","Parameter":"JSONVar"},{"DESCRIPTION":"A Boolean value that specifies whether to convert the JSON strictly, as follows: true: (Default) Convert the JSON string to ColdFusion data types that correspond directly to the JSON data types. false: Determine if the JSON string contains representations of ColdFusion queries, and if so, convert them to queries.","Parameter":"strictMapping"}]}