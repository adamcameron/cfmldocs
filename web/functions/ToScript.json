{"HISTORY":"<!-- --><br>ColdFusion MX 7: Added this function.<br>","SYNTAX":"<!-- --><br>ToScript(<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">cfvar<\/i>, <i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">javascriptvar<\/i>, <i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">outputformat<\/i>, <i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">ASFormat<\/i>)<br>","CATEGORY":"Conversion functions, Extensibility functions","PAGENAME":"ToScript","SEEALSO":"<!-- --><br><samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7ca6.html\">cfwddx<\/a><\/samp>; <a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-617b.html\">WDDX JavaScript Objects<\/a><br>","DESCRIPTION":"Creates a JavaScript or ActionScript expression that assigns the value of a ColdFusion variable to a JavaScript or ActionScript variable. This function can convert ColdFusion strings, numbers, arrays, structures, and queries to JavaScript or ActionScript syntax that defines equivalent variables and values.","LICENCE":"http:\/\/help.adobe.com\/en_US\/ColdFusion\/10.0\/LegalNotices\/index.html","EXAMPLE":"<!-- --><br>The following example shows the results of converting a ColdFusion string, array, and query object to JavaScript variables. It also uses the string and array in JavaScript code.<br>&lt;h2&gt;ToScript&lt;\/h2&gt; \r\n \r\n&lt;h3&gt;Converting a string variable&lt;\/h3&gt; \r\n&lt;cfset thisString = &quot;This is a string&quot;&gt; \r\n&lt;cfoutput&gt; \r\n    &lt;b&gt;The thisString variable in ColdFusion&lt;\/b&gt;&lt;br&gt; \r\n    #thisString#&lt;br&gt; \r\n    &lt;br&gt; \r\n    &lt;strong&gt;The output of ToScript(thisString, &quot;jsVar&quot;)&lt;\/strong&gt;&lt;br&gt; \r\n    #ToScript(thisString, &quot;jsVar&quot;)#&lt;br&gt; \r\n    &lt;br&gt; \r\n    &lt;strong&gt;In a JavaScript script, convert thisString Variable to JavaScript \r\n     and output the resulting variable:&lt;\/strong&gt;&lt;br&gt; \r\n    &lt;script type=&quot;text\/javascript&quot; language=&quot;JavaScript&quot;&gt; \r\n        var #ToScript(thisString, &quot;jsVar&quot;)#; \r\n        document.write(&quot;jsVar in JavaScript is: &quot; + jsVar); \r\n    &lt;\/script&gt; \r\n&lt;\/cfoutput&gt; \r\n \r\n&lt;h3&gt;Converting an array&lt;\/h3&gt; \r\n&lt;!--- Create and populate a one-dimensional array ---&gt; \r\n&lt;cfset myArray=ArrayNew(1)&gt; \r\n&lt;cfloop index=&quot;i&quot; from=&quot;1&quot; to=&quot;4&quot;&gt; \r\n            &lt;cfset myArray[i]=&quot;This is array element&quot; &amp; i&gt; \r\n&lt;\/cfloop&gt; \r\n \r\n&lt;cfoutput&gt; \r\n&lt;b&gt;The ColdFusion myArray Array&lt;\/b&gt;&lt;br&gt; \r\n&lt;!--- Write the contents of the myArray variable in ColdFusion ---&gt; \r\n    &lt;cfloop index=&quot;i&quot; from=&quot;1&quot; to=&quot;#arrayLen(myArray)#&quot;&gt; \r\n        myArry[#i#]: #myArray[i]#&lt;br&gt; \r\n    &lt;\/cfloop&gt; \r\n    &lt;br&gt; \r\n    &lt;strong&gt;The output of ToScript(myArray, &quot;jsArray&quot;)&lt;\/strong&gt;&lt;br&gt; \r\n    #toScript(myArray, &quot;jsArray&quot;)#&lt;br&gt; \r\n    &lt;br&gt; \r\n    &lt;strong&gt;In JavaScript, convert myArray to a JavaScript variable and write it's contents&lt;\/strong&gt;&lt;br&gt; \r\n    &lt;script type=&quot;text\/javascript&quot; language=&quot;JavaScript&quot;&gt; \r\n        var #ToScript(myArray, &quot;jsArray&quot;)#; \r\n        for (i in jsArray) \r\n        { \r\n            document.write(&quot;myArray[&quot; + i + &quot;]: &quot; + jsArray[i] + &quot;&lt;br&gt;&quot;); \r\n        } \r\n    &lt;\/script&gt; \r\n&lt;br&gt; \r\n&lt;h3&gt;Converting a query&lt;\/h3&gt; \r\nThis section converts the following query object to both WDDX format  \r\nand ActionScript type JavaScript objects.&lt;br&gt; \r\n \r\n&lt;!--- Query a database ---&gt; \r\n&lt;cfquery name=&quot;thisQuery&quot; datasource=&quot;cfdocexamples&quot;&gt; \r\n    SELECT FirstName,LastName \r\n    FROM employee \r\n    WHERE FirstName = 'John' \r\n&lt;\/cfquery&gt; \r\n&lt;br&gt; \r\nThe Query in ColdFusion \r\n&lt;cftable query=&quot;thisQuery&quot; headerlines=&quot;1&quot; colheaders&gt; \r\n    &lt;cfcol align=&quot;left&quot; width=&quot;9&quot; header=&quot;&lt;b&gt;FirstName&lt;\/b&gt;&quot; text=&quot;#FirstName#&quot;&gt; \r\n    &lt;cfcol align=&quot;left&quot; width=&quot;9&quot; header=&quot;&lt;b&gt;LastName&lt;\/b&gt;&quot; text=&quot;#LastName#&quot;&gt; \r\n&lt;\/cftable&gt; \r\n \r\n&lt;strong&gt;JavaScript generated by ToScript(thisQuery, &quot;WDDXQuery&quot;):&lt;\/strong&gt;&lt;br&gt;  \r\n    #toScript(thisQuery, &quot;WDDXQuery&quot;)#;&lt;br&gt; \r\n    &lt;br&gt; \r\n&lt;strong&gt;JavaScript generated by ToScript(thisQuery, &quot;ActionScriptQuery&quot;, \r\n            False):&lt;\/strong&gt;&lt;br&gt;  \r\n    #toScript(thisQuery, &quot;ActionScriptQuery&quot;, False)#&lt;br&gt; \r\n    &lt;br&gt; \r\n&lt;!--- Convert to both WDDX format and ActionScript format ---&gt; \r\n&lt;script type=&quot;text\/javascript&quot; language=&quot;JavaScript&quot;&gt;  \r\n    #ToScript(thisQuery, &quot;WDDXQuery&quot;)#; \r\n    #ToScript(thisQuery, &quot;ActionScriptQuery&quot;, False)#;  \r\n&lt;\/script&gt; \r\n&lt;!--- For brevity, this example does not use JavaScript query variables ---&gt; \r\n&lt;\/cfoutput&gt;<br>","USAGE":"<!-- --><br>To use a ColdFusion variable in JavaScript or ActionScript, the <samp class=\"codeph\">ToScript<\/samp> function must be in a <samp class=\"codeph\">cfoutput<\/samp> region and be surrounded by number signs (#). For example, the following code uses the <samp class=\"codeph\">ToScript<\/samp> function to convert a ColdFusion variable to a JavaScript variable:<br>&lt;cfset thisString=&quot;hello world&quot;&gt; \r\n&lt;script type=&quot;text\/javascript&quot; language=&quot;JavaScript&quot;&gt; \r\n    &lt;cfoutput&gt; \r\n        var #toScript(thisString, &quot;jsVar&quot;)#; \r\n    &lt;\/cfoutput&gt; \r\n&lt;\/script&gt;<br>When ColdFusion runs this code, it sends the following to the client:<br>&lt;script type=&quot;text\/javascript&quot; language=&quot;JavaScript&quot;&gt; \r\n    var jsVar = &quot;hello world&quot;; \r\n&lt;\/script&gt;<br>An HTML script tag must enclose the JavaScript code. The <samp class=\"codeph\">cfoutput<\/samp> tag does not need to be inside the script block; it can also surround the block.<br>WDDX-style output generates JavaScript code that creates a WDDXRecordset object, where the key of each record set entry is a column name, and the value of the recordlist entry is an array of the corresponding query column entries, as follows:<br>WDDXQuery = new WddxRecordset(); \r\ncol0 = new Array(); \r\ncol0[0] = &quot;John&quot;; \r\ncol0[1] = &quot;John&quot;; \r\nWDDXQuery[&quot;firstname&quot;] = col0; \r\ncol0 = null; \r\ncol1 = new Array(); \r\ncol1[0] = &quot;Lund&quot;; \r\ncol1[1] = &quot;Allen&quot;; \r\nWDDXQuery[&quot;lastname&quot;] = col1; \r\ncol1 = null;<br>To use WDDX-style output, first load the <i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">cf_webroot<\/i>\/CFIDE\/scripts\/wddx.js script, which defines JavaScript WDDX objects, as in the following line:<br>&lt;script type=&quot;text\/javascript&quot; src=&quot;\/CFIDE\/scripts\/wddx.js&quot;&gt; &lt;\/script&gt;<br>For more information on WDDX in JavaScript, see <a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-617b.html\">WDDX JavaScript Objects<\/a>.<br>ActionScript-style output generates code that creates an array of objects, where the array is indexed by row number, and the objects consist of column name - column value pairs, as follows:<br>ActionScriptQuery = new Array(); \r\nActionScriptQuery[0] = new Object(); \r\nActionScriptQuery[0]['firstname'] = &quot;John&quot;; \r\nActionScriptQuery[0]['lastname'] = &quot;Lund&quot;; \r\nActionScriptQuery[1] = new Object(); \r\nActionScriptQuery[1]['firstname'] = &quot;John&quot;; \r\nActionScriptQuery[1]['lastname'] = &quot;Allen&quot;;<br>An ActionScript-style array does not require you to include the wddx.js file, and creates a variable that you can use in ActionScript on a Flash format form, for example, in an <samp class=\"codeph\">onChange<\/samp> attribute.<br>If the <samp class=\"codeph\">outputformat<\/samp> parameter is False, setting <samp class=\"codeph\">ASFormat<\/samp> to True causes <samp class=\"codeph\">ToScript<\/samp> to use the ActionScript shortcut <samp class=\"codeph\">[]<\/samp> in place of <samp class=\"codeph\">New<\/samp><samp class=\"codeph\">Array()<\/samp> and the shortcut <samp class=\"codeph\">{}<\/samp> in place of <samp class=\"codeph\">New<\/samp><samp class=\"codeph\">Object()<\/samp>. Using these shortcuts allows you to pass ActionScript into <samp class=\"codeph\">cfform<\/samp> attributes without triggering ActionScript validation. If <samp class=\"codeph\">ASFormat<\/samp> is False, <samp class=\"codeph\">ToScript<\/samp> generates <samp class=\"codeph\">New<\/samp><samp class=\"codeph\">Array()<\/samp> and <samp class=\"codeph\">New<\/samp><samp class=\"codeph\">Object()<\/samp> in the script.<br>","Parameter":[{"DESCRIPTION":"A ColdFusion variable. This can contain one of the following: String Number Array Structure Query","Parameter":"cfvar"},{"DESCRIPTION":"A string that specifies the name of the JavaScript variable that the ToScript function creates.","Parameter":"javascriptvar"},{"DESCRIPTION":"Optional. A Boolean value that determines whether to create WDDX (JavaScript) or ActionScript style output for structures and queries: True: creates WDDX-style output (default). False: creates ActionScript-style output.","Parameter":"outputformat"},{"DESCRIPTION":"Optional. A Boolean value that specifies whether to use ActionScript shortcuts in the script: True: creates new Objects and Arrays with ActionScript shortcuts: [] for New Array(), and {} for New Object. Using ActionScript shortcuts allows you to pass ActionScript into cfform attributes without triggering ActionScript validation. False: does not use ActionScript shortcuts to create new Objects and new Arrays when generating the script. Instead, generates New Object() and New Array() in the script (default).","Parameter":"ASFormat"}]}