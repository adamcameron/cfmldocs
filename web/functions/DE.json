{"HISTORY":"","SYNTAX":"<!-- --><br>DE(<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">string<\/i>)<br>","CATEGORY":"Dynamic evaluation functions","PAGENAME":"DE","SEEALSO":"<!-- --><br><samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7f4e.html\">Evaluate<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7f4c.html\">IIf<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7fd9.html\">PrecisionEvaluate<\/a><\/samp>, <a href=\"http:\/\/help.adobe.com\/en_US\/ColdFusion\/9.0\/Developing\/WSc3ff6d0ea77859461172e0811cbec22c24-7ff1.html\" target=\"_self\">Using Expressions and Number Signs<\/a> in the <i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">Developing ColdFusion Applications<\/i><br>","DESCRIPTION":"Escapes any double-quotation marks in the parameter and wraps the result in double-quotation marks.","LICENCE":"http:\/\/help.adobe.com\/en_US\/ColdFusion\/10.0\/LegalNotices\/index.html","EXAMPLE":"<!-- --><br>&lt;!--- This example shows the use of DE and Evaluate ---&gt; \r\n&lt;h3&gt;DE Example&lt;\/h3&gt; \r\n&lt;cfif IsDefined(&quot;FORM.myExpression&quot;)&gt; \r\n    &lt;cftry&gt; \r\n        &lt;!--- Show the expression and the results of evaluating it ---&gt; \r\n        &lt;cfoutput&gt; \r\n            &lt;h3&gt;Evaluate the Expression #FORM.MyExpression#&lt;\/h3&gt; \r\n        &lt;\/cfoutput&gt; \r\n        The code:&lt;br&gt; \r\n        #Evaluate(FORM.myExpression)# \r\n        &lt;br&gt;&lt;br&gt; \r\n        The result:&lt;br&gt; \r\n        &lt;cfoutput&gt; \r\n            #Evaluate(FORM.myExpression)# \r\n        &lt;\/cfoutput&gt; \r\n         \r\n        &lt;h3&gt;Use DE to prevent the Evaluate function from evaluating&lt;\/h3&gt; \r\n        The code:&lt;br&gt; \r\n        #Evaluate(DE(FORM.MyExpression))#&lt;br&gt;&lt;br&gt; \r\n        The result:&lt;br&gt; \r\n        &lt;cfoutput&gt; \r\n            #Evaluate(DE(FORM.MyExpression))#         \r\n        &lt;\/cfoutput&gt; \r\n        &lt;!--- Error handling code for bad expressions and any other error.---&gt; \r\n        &lt;cfcatch type = &quot;Any&quot;&gt; \r\n        &lt;!--- the message to display ---&gt; \r\n            &lt;h3&gt;Sorry, there's been an &lt;B&gt;Error&lt;\/B&gt;. \r\n            Try a simple expression, such as &quot;2+2&quot;.&lt;\/h3&gt; \r\n            &lt;cfoutput&gt; \r\n            &lt;!--- Display the diagnostic message from ColdFusion. ---&gt; \r\n                &lt;p&gt;#cfcatch.message# \r\n            &lt;\/cfoutput&gt; \r\n        &lt;\/cfcatch&gt; \r\n    &lt;\/cftry&gt; \r\n&lt;\/cfif&gt; \r\n \r\n&lt;h3&gt;Enter any valid ColdFusion expression&lt;\/h3&gt; \r\n&lt;cfform&gt; \r\n    &lt;cfinput name=&quot;myExpression&quot; type=&quot;Text&quot; size=&quot;40&quot;&gt; \r\n    &lt;cfinput type=&quot;submit&quot; name=&quot;submitit&quot;&gt; \r\n&lt;\/cfform&gt;<br>","USAGE":"<!-- --><br>The <samp class=\"codeph\">DE<\/samp> function postpones evaluation of a string that is passed as a parameter to the <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7f4c.html\">IIf<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7f4e.html\">Evaluate<\/a><\/samp>, or <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7fd9.html\">PrecisionEvaluate<\/a><\/samp> functions.<br>This function is especially useful with the <samp class=\"codeph\">IIf<\/samp> function, which automatically evaluates its second and third parameters as expressions. You can use the <samp class=\"codeph\">DE<\/samp> function to prevent the function from evaluating a string parameter that is to be output as a variable, and must not be treated as an expression. The following example shows this use; it uses <samp class=\"codeph\">IIF<\/samp> to alternate table-row background colors, white and gray, and uses the <samp class=\"codeph\">DE<\/samp> function to prevent ColdFusion from evaluating the color strings.<br>&lt;cfoutput&gt; \r\n&lt;table border=&quot;1&quot; cellpadding=&quot;3&quot;&gt; \r\n&lt;cfloop index=&quot;i&quot; from=&quot;1&quot; to=&quot;10&quot;&gt; \r\n    &lt;tr bgcolor=&quot;#IIF( i mod 2 eq 0, DE(&quot;white&quot;), DE(&quot;gray&quot;) )#&quot;&gt; \r\n        &lt;td&gt; \r\n            hello #i# \r\n        &lt;\/td&gt; \r\n    &lt;\/tr&gt; \r\n&lt;\/cfloop&gt; \r\n&lt;\/table&gt; \r\n&lt;\/cfoutput&gt;<br>The <samp class=\"codeph\">DE<\/samp> function does not delay evaluation of variable names that are surrounded by number signs (#). The ColdFusion function evaluates the variable regardless of whether the <samp class=\"codeph\">DE <\/samp>function is present.<br>The following example shows how you can use the <samp class=\"codeph\">DE<\/samp> function and number signs together, and shows how the function works with an <samp class=\"codeph\">IIF<\/samp> function:<br>&lt;cfoutput&gt; \r\n&lt;cfset var1=&quot;Blue&quot;&gt; \r\n&lt;cfset var2=&quot;Green&quot;&gt; \r\n&lt;cfset myresult=IIf( 1 eq 2, DE(#Var1#), DE(#Var2#))&gt; \r\nThe expression is #myresult# \r\n&lt;\/cfoutput&gt;<br>ColdFusion processes this code as follows:<br><li><p>ColdFusion sets the variables <samp class=\"codeph\">var1<\/samp> and <samp class=\"codeph\">var2<\/samp> to be the strings Blue and Green.<\/p> <\/li> \n<li><p>In the fourth line, ColdFusion evaluates the variables surrounded by number signs first, replacing them with the strings Blue and Green, the values of the variables.<\/p> <\/li> \n<li><p>The <samp class=\"codeph\">IIF<\/samp> function evaluates the test expression, determines that it is False, and then evaluates the third parameter.<\/p> <\/li> \n<li><p>The third parameter is a <samp class=\"codeph\">DE<\/samp> function, which takes the string Green and surrounds it in quotation marks<\/p> <\/li> \n<li><p>The <samp class=\"codeph\">IIF<\/samp> function returns the string &quot;Green&quot;, including the quotation marks.<\/p> <\/li> \n<li><p>The <samp class=\"codeph\">cfset<\/samp> tag gets the expression result=&quot;Green&quot;, and sets the value of the <samp class=\"codeph\">myresult<\/samp> variable to the string Green.<\/p> <\/li> \n<li><p>ColdFusion evaluates <samp class=\"codeph\">#myresult#<\/samp> in the output text, replaces the variable with its value, the string Green, and displays the result.<\/p> <\/li><br>","Parameter":[{"DESCRIPTION":"String to evaluate, after delay","Parameter":"string"}]}