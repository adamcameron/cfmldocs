{"HISTORY":"<!-- --><br>ColdFusion MX 7: Added the <samp class=\"codeph\">datatype<\/samp> parameter.<br>ColdFusion MX: Changed behavior: if a user attempts to add a column whose name is invalid, ColdFusion throws an error. (In earlier releases, ColdFusion permitted the add operation, but the user could not reference the column after adding it.)<br>","SYNTAX":"<!-- --><br>QueryAddColumn(<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">query<\/i>, <i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">column-name <\/i>[, <i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">datatype<\/i>], <i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">array-name<\/i>)<br>","CATEGORY":"Query functions","PAGENAME":"QueryAddColumn","SEEALSO":"<!-- --><br><samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7f94.html\">QueryNew<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-6d1b.html\">QueryAddRow<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-6d1a.html\">QuerySetCell<\/a><\/samp>; <samp class=\"codeph\"><a href=\"http:\/\/help.adobe.com\/en_US\/ColdFusion\/9.0\/Developing\/WSc3ff6d0ea77859461172e0811cbec22c24-627b.html\" target=\"_self\">Managing data types for columns<\/a><\/samp> in the <i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">Developing ColdFusion Applications<\/i><br>","DESCRIPTION":"Adds a column to a query and populates its rows with the contents of a one-dimensional array. Pads query columns, if necessary, to ensure that all columns have the same number of rows.","LICENCE":"http:\/\/help.adobe.com\/en_US\/ColdFusion\/10.0\/LegalNotices\/index.html","EXAMPLE":"<!-- --><br>The following example creates a query object, uses the <samp class=\"codeph\">QueryAddColumn<\/samp> function to add three columns to the object, and displays the results. Because two of the arrays that provide the data are shorter than the third, QueryAddColumn adds padding to the corresponding columns in the query.<br>&lt;!--- Make a query. ---&gt; \r\n&lt;cfset myQuery = QueryNew(&quot;&quot;)&gt; \r\n \r\n&lt;!--- Create an array. ---&gt; \r\n&lt;cfset FastFoodArray = ArrayNew(1)&gt; \r\n&lt;cfset FastFoodArray[1] = &quot;French Fries&quot;&gt; \r\n&lt;cfset FastFoodArray[2] = &quot;Hot Dogs&quot;&gt; \r\n&lt;cfset FastFoodArray[3] = &quot;Fried Clams&quot;&gt; \r\n&lt;cfset FastFoodArray[4] = &quot;Thick Shakes&quot;&gt; \r\n&lt;!--- Use the array to add a column to the query. ---&gt; \r\n<strong>&lt;cfset nColumnNumber = QueryAddColumn(myQuery, &quot;FastFood&quot;, &quot;VarChar&quot;,<\/strong> \r\n            <strong>FastFoodArray)&gt;<\/strong> \r\n \r\n&lt;!--- Create a second array. ---&gt; \r\n&lt;cfset FineCuisineArray = ArrayNew(1)&gt; \r\n&lt;cfset FineCuisineArray[1] = &quot;Lobster&quot;&gt; \r\n&lt;cfset FineCuisineArray[2] = &quot;Flambe&quot;&gt; \r\n&lt;!--- Use the array to add a second column to the query. ---&gt; \r\n<strong>&lt;cfset nColumnNumber2 = QueryAddColumn(myQuery, &quot;FineCuisine&quot;, &quot;VarChar&quot;,<\/strong> \r\n            <strong> FineCuisineArray)&gt;<\/strong> \r\n \r\n&lt;!--- Create a third array. ---&gt; \r\n&lt;cfset HealthFoodArray = ArrayNew(1)&gt; \r\n&lt;cfset HealthFoodArray[1] = &quot;Bean Curd&quot;&gt; \r\n&lt;cfset HealthFoodArray[2] = &quot;Yogurt&quot;&gt; \r\n&lt;cfset HealthFoodArray[3] = &quot;Tofu&quot;&gt; \r\n&lt;!--- Use the array to add a third column to the query. ---&gt; \r\n<strong>&lt;cfset nColumnNumber3 = QueryAddColumn(myQuery, &quot;HealthFood&quot;, &quot;VarChar&quot;,<\/strong> \r\n            <strong> HealthFoodArray)&gt;<\/strong> \r\n \r\n&lt;!--- Display the results. ---&gt; \r\n&lt;table cellspacing = &quot;2&quot; cellpadding = &quot;2&quot; border = &quot;0&quot;&gt; \r\n&lt;tr&gt; \r\n&lt;th align = &quot;left&quot;&gt;Fast Food&lt;\/th&gt; \r\n&lt;th align = &quot;left&quot;&gt;Fine Cuisine&lt;\/th&gt; \r\n&lt;th align = &quot;left&quot;&gt;Health Food&lt;\/th&gt; \r\n&lt;\/tr&gt; \r\n&lt;cfoutput query = &quot;myQuery&quot;&gt; \r\n&lt;tr&gt; \r\n&lt;td&gt;#FastFood#&lt;\/td&gt; \r\n&lt;td&gt;#FineCuisine#&lt;\/td&gt; \r\n&lt;td&gt;#HealthFood#&lt;\/td&gt; \r\n&lt;\/tr&gt; \r\n&lt;\/cfoutput&gt; \r\n&lt;\/table&gt;<br>","USAGE":"<!-- --><br>You can add columns to query objects, such as queries retrieved with the <samp class=\"codeph\">cfquery<\/samp> tag or queries created with the <samp class=\"codeph\">QueryNew<\/samp> function. You cannot use the <samp class=\"codeph\">QueryAddColumn<\/samp> function on a cached query. This function is useful for generating a query object from the arrays of output parameters that Oracle stored procedures can generate.<br>Adobe recommends that you use the optional <i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">datatype<\/i> parameter. Without this parameter, ColdFusion must try to determine the columnâ€™s data type when it uses the query object in a query of queries. Determining the data type requires additional processing, and can result in errors if ColdFusion does not guess the type correctly.<br>","Parameter":[{"DESCRIPTION":"Name of a query object.","Parameter":"query"},{"DESCRIPTION":"Name of the new column.","Parameter":"column-name"},{"DESCRIPTION":"(Optional) Column data type. ColdFusion generates an error if data you add to the column is not of this type, or if it cannot convert the data to this type. The following data types are valid: Integer: 32-bit integer BigInt: 64-bit integer Double: 64-bit decimal number Decimal: Variable length decimal, as specified by java.math.BigDecimal VarChar: String Binary: Byte array Bit: Boolean (1=True, 0=False) Time: Time Date: Date (can include time information)","Parameter":"datatype"},{"DESCRIPTION":"Name of an array whose elements populate the new column.","Parameter":"array-name"}]}