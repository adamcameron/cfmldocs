{"HISTORY":"<!-- --><br>ColdFusion 8: Added support for encryption using the RSA BSafe Crypto-J library on Enterprise Edition.<br>ColdFusion MX 7.01: Added this function.<br>","SYNTAX":"<!-- --><br>DecryptBinary(<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">bytes<\/i>, <i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">key[<\/i>, <i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">algorithm<\/i>, <i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">IVorSalt<\/i>, iterations])<br>","CATEGORY":"Security functions, String functions","PAGENAME":"DecryptBinary","SEEALSO":"<!-- --><br><samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7f9b.html\">Duplicate<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7c2f.html\">Encrypt<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7c1c.html\">Decrypt<\/a><\/samp><br>","DESCRIPTION":"Decrypts encrypted binary data with the specified key, value, algorithm, salt, and iterations.","LICENCE":"http:\/\/help.adobe.com\/en_US\/ColdFusion\/10.0\/LegalNotices\/index.html","EXAMPLE":"<!-- --><br>&lt;h3&gt;DecryptBinary Example&lt;\/h3&gt; \r\n&lt; !--- Do the following if the form has been submitted. ---&gt; \r\n&lt;cfif IsDefined(&quot;Form.myfile&quot;)&gt; \r\n&lt;cffile file=&quot;#Form.myfile#&quot; action=&quot;readBinary&quot; variable=&quot;myData&quot;&gt; \r\n&lt;cfscript&gt; \r\n\/* GenerateSecretKey does not generate key for the CFMX_COMPAT algorithm, \r\nso use the key from the form. \r\n*\/ \r\nif (Form.myAlgorithm EQ &quot;CFMX_COMPAT&quot;) \r\ntheKey=Form.MyKey; \r\n\/\/ For all other encryption techniques, generate a secret key. \r\nelse \r\ntheKey=generateSecretKey(Form.myAlgorithm); \r\n\/\/Encrypt the string \r\nencrypted=encryptBinary(myData, theKey, Form.myAlgorithm); \r\n\/\/Decrypt it \r\ndecrypted=decryptBinary(encrypted, theKey, Form.myAlgorithm); \r\n&lt;\/cfscript&gt; \r\n&lt;cfset encfile=&quot;#Form.myfile#&quot; &amp; &quot;_enc&quot;&gt; \r\n&lt;cfset decfile=&quot;#Form.myfile#&quot; &amp; &quot;_dec&quot;&gt; \r\n&lt;cffile file=&quot;#encfile#&quot; action=&quot;write&quot; output=&quot;#encrypted#&quot;&gt; \r\n&lt;cffile file=&quot;#decfile#&quot; action=&quot;write&quot; output=&quot;#decrypted#&quot;&gt; \r\n&lt;!--- Display the values used for encryption and decryption,  \r\nand the results. ---&gt; \r\n&lt;cfoutput&gt; \r\n&lt;b&gt;The algorithm:&lt;\/b&gt; #Form.myAlgorithm#&lt;br&gt; \r\n&lt;b&gt;The key:&lt;\/B&gt; #theKey#&lt;br&gt; \r\n&lt;br&gt; \r\n&lt;b&gt;The InputFile:&lt;\/b&gt; #Form.myfile# &lt;br&gt; \r\n&lt;br&gt; \r\n&lt;b&gt;Encrypted:&lt;\/b&gt; #encfile#&lt;br&gt; \r\n&lt;br&gt; \r\n&lt;b&gt;Decrypted:&lt;\/b&gt; #decfile#&lt;br&gt; \r\n&lt;\/cfoutput&gt; \r\n&lt;\/cfif&gt; \r\n&lt;!--- The input form. ---&gt; \r\n&lt;form action=&quot;#CGI.SCRIPT_NAME#&quot; method=&quot;post&quot;&gt; \r\n&lt;b&gt;Select the algorithm&lt;\/b&gt;&lt;br&gt; \r\n    &lt;select size=&quot;1&quot; name=&quot;myAlgorithm&quot;&gt; \r\n        &lt;option selected&gt;CFMX_COMPAT&lt;\/option&gt; \r\n        &lt;option&gt;AES&lt;\/option&gt; \r\n        &lt;option&gt;DES&lt;\/option&gt; \r\n        &lt;option&gt;DESEDE&lt;\/option&gt; \r\n&lt;\/select&gt;&lt;br&gt; \r\n&lt;br&gt; \r\n&lt;b&gt;Input your key&lt;\/b&gt; (used for CFMX_COMPAT encryption only)&lt;br&gt; \r\n&lt;input type = &quot;Text&quot; name = &quot;myKey&quot; value = &quot;MyKey&quot;&gt;&lt;br&gt; \r\n&lt;br&gt; \r\n&lt;b&gt;Enter filename to encrypt&lt;\/b&gt;&lt;br&gt; \r\n&lt;input type=&quot;text&quot; name=&quot;myfile&quot; value=&quot;Enter the path of the file to encrypt&quot;&gt;&lt;br&gt; \r\n&lt;input type = &quot;Submit&quot; value = &quot;Encrypt file &quot;&gt; \r\n&lt;\/form&gt;<br>","USAGE":"<!-- --><br>This function uses a symmetric key-based algorithm, in which the same key is used to encrypt and decrypt data. The parameter values must match the values used to encode the string. The security of the encrypted string depends on maintaining the secrecy of the key.<br>ColdFusion uses the Java Cryptography Extension (JCE) and installs a Sun Java runtime that includes the Sun JCE default security provider. This provider includes the algorithms listed in the Parameters section. The JCE framework includes facilities for using other provider implementations; however, Adobe cannot provide technical support for third-party security providers.<br>","Parameter":[{"DESCRIPTION":"Binary data to decrypt.","Parameter":"bytes"},{"DESCRIPTION":"String. For the CFMX_COMPAT algorithm, the seed that was used to encrypt the binary data; for all other algorithms, the string generated by the generateSecretKey() method.","Parameter":"key"},{"DESCRIPTION":"(Optional) The Enterprise Edition of ColdFusion installs the RSA BSafe Crypto-J library, which provides FIPS-140 Compliant Strong Cryptography. For a list of algorithms, see the Encrypt function. The Standard Edition of ColdFusion installs a cryptography library with the following algorithms: CFMX_COMPAT: the algorithm used in ColdFusion MX and prior releases. This algorithm is the least secure option (default). AES: the Advanced Encryption Standard specified by the National Institute of Standards and Technology (NIST) FIPS-197. BLOWFISH: the Blowfish algorithm defined by Bruce Schneier. DES: the Data Encryption Standard algorithm defined by NIST FIPS-46-3. DESEDE: the \"Triple DES\" algorithm defined by NIST FIPS-46-3. If you install a security provider with additional cryptography algorithms, you can also specify any of its string encryption and decryption algorithms.","Parameter":"algorithm"},{"DESCRIPTION":"(Optional) Specify this parameter to adjust ColdFusion encryption to match the details of other encryption software. If you specify this parameter, also specify the algorithm parameter. For Block Encryption Algorithms: The binary Initialization Vector value to use with the algorithm. The algorithm must contain a Feedback Mode other than ECB. This must be a binary value that is exactly the same size as the algorithm block size. For Password Based Encryption Algorithms:- This is the binary Salt value to transform the password into a key.","Parameter":"IVorSalt"},{"DESCRIPTION":"(Optional) The number of iterations to transform the password into a binary key. Specify this parameter to adjust ColdFusion encryption to match the details of other encryption software. If you specify this parameter, also specify the algorithm parameter with a Password Based Encryption (PBE) algorithm. Do not specify this parameter for Block Encryption Algorithms. Use the same value to encrypt and decrypt the data.","Parameter":"iterations"}]}