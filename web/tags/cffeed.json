{"HISTORY":"<!-- --><br>ColdFusion 8: Added this tag.<br>ColdFusion 9: The <samp class=\"codeph\">escapeChars<\/samp> attribute is newly added.<br>","SYNTAX":"<!-- --><br><strong>create<\/strong> \r\n    <strong>required<\/strong> \r\n    &lt;cffeed \r\n    action = &quot;create&quot; \r\n    name = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">#structure#<\/i>&quot; \r\n        <i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">One or both of the following:<\/i>    outputFile = &quot;path&quot; \r\n    xmlVar = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">variable name<\/i>&quot; \r\n    <strong>optional<\/strong> \r\n    overwrite = &quot;no|yes&quot;&gt; \r\n    escapeChars = &quot;true|false&quot;&gt; \r\n \r\nOR \r\n \r\n    <strong>required<\/strong> \r\n    &lt;cffeed \r\n    action = &quot;create&quot; \r\n    properties = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">#metadata structure#<\/i>&quot; \r\n    query = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">#items\/entries query name#<\/i>&quot; \r\n        <i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">One or both of the following:<\/i>    outputFile = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">path<\/i>&quot; \r\n    xmlVar = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">variable name<\/i>&quot; \r\n    <strong>optional<\/strong> \r\n    columnMap = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">mapping structure<\/i>&quot; \r\n    overwrite = &quot;no|yes&quot;&gt; \r\n \r\n<strong>read<\/strong> \r\n    <strong>required<\/strong> \r\n    &lt;cffeed \r\n    source = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">feed source<\/i>&quot; \r\n        <i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">One or more of the following:<\/i>    name = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">structure<\/i>&quot; \r\n    properties = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">metadata structure<\/i>&quot; \r\n    query = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">items\/entries query<\/i>&quot; \r\n    outputFile = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">path<\/i>&quot; \r\n    xmlVar = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">variable name<\/i>&quot; \r\n    <strong>optional<\/strong> \r\n    action = &quot;read&quot; \r\n    enclosureDir = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">path<\/i>&quot; \r\n    ignoreEnclosureError = &quot;no|yes&quot; \r\n    overwrite = &quot;no|yes&quot; \r\n    overwriteEnclosure = &quot;no|yes&quot; \r\n    proxyServer = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">IP address or server name for proxy host<\/i>&quot; \r\n    proxyPassword = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">password for the proxy host<\/i>&quot; \r\n    proxyPort = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">port of the proxy host<\/i>&quot; \r\n    proxyUser = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">user name for the proxy host<\/i>&quot; \r\n    timeout = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">request time-out in seconds<\/i>&quot; \r\n    userAgent = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">HTTP user agent identifier<\/i>&quot;&gt;<br><span class=\"notetitle\">Note: <\/span>You can specify this tag’s attributes in an \n<samp class=\"codeph\">attributeCollection<\/samp> attribute whose value is a structure. Specify the structure name in the \n<samp class=\"codeph\">attributeCollection<\/samp> attribute and use the tag’s attribute names as structure keys.<br>","CATEGORY":"Communications tags, Internet protocol tags","PAGENAME":"cffeed","SEEALSO":"","DESCRIPTION":"Reads or creates an RSS or Atom syndication feed. This tag can read RSS versions 0.90, 0.91, 0.92, 0.93, 0.94, 1.0, and 2.0, and Atom 0.3 or 1.0. It can create RSS 2.0 or Atom 1.0 feeds.","LICENCE":"http:\/\/help.adobe.com\/en_US\/ColdFusion\/10.0\/LegalNotices\/index.html","EXAMPLE":"<!-- --><br>The following example creates an RSS feed. Enter fields for the feed title, link, and description elements. Also enter title, link, and description fields for one item. A second item is optional. The application saves the feed in a createRSSOutput.xml file in the feedTest subdirectory of the directory that contains the CFML page.<br>&lt;!--- Generate the feed when the user submits a filled in form. ---&gt; \r\n&lt;cfif isDefined(&quot;Form.Submit&quot;)&gt; \r\n    &lt;cfscript&gt; \r\n \r\n        \/\/ Create the feed data structure and add the metadata. \r\n        myStruct = StructNew(); \r\n        mystruct.link = form.link; \r\n        myStruct.title = form.title; \r\n        mystruct.description = form.description; \r\n        mystruct.pubDate = Now(); \r\n        mystruct.version = &quot;rss_2.0&quot;; \r\n \r\n        \/* Add the feed items. A more sophisticated application would use dynamic variables \r\n            and support varying numbers of items. *\/ \r\n        myStruct.item = ArrayNew(1); \r\n        myStruct.item[1] = StructNew(); \r\n        myStruct.item[1].description = StructNew(); \r\n        myStruct.item[1].description.value = form.item1text; \r\n        myStruct.item[1].link = form.item1link; \r\n        myStruct.item[1].pubDate = Now(); \r\n        myStruct.item[1].title = form.item1title; \r\n        myStruct.item[2] = StructNew(); \r\n        myStruct.item[2].description = StructNew(); \r\n        myStruct.item[2].description.value = form.item2text; \r\n        myStruct.item[2].link = form.item2link; \r\n        myStruct.item[2].pubDate = Now(); \r\n        myStruct.item[2].title = form.item2title; \r\n \r\n    &lt;\/cfscript&gt; \r\n \r\n    &lt;!--- Generate the feed and save it to a file and variable. ---&gt; \r\n    &lt;cffeed action = &quot;create&quot; \r\n        name = &quot;#myStruct#&quot; \r\n        outputFile = &quot;feedTest\/createRSSOutput.xml&quot;  \r\n        overwrite = &quot;yes&quot; \r\n        xmlVar = &quot;myXML&quot;&gt; \r\n \r\n&lt;\/cfif&gt; \r\n \r\n&lt;!--- The user input form. ---&gt; \r\n&lt;cfform format=&quot;xml&quot; preservedata=&quot;yes&quot; style=&quot;width:500&quot; height=&quot;700&quot;&gt; \r\n    &lt;cfformitem type = &quot;text&quot;&gt; Enter The Feed Metadata&lt;\/cfformitem&gt; \r\n    &lt;cfinput type = &quot;text&quot; label = &quot;title&quot; name = &quot;title&quot;  \r\n        style = &quot;width:435&quot; required = &quot;yes&quot;&gt; &lt;br \/&gt; \r\n    &lt;cfinput type = &quot;text&quot; label = &quot;link&quot; name = &quot;link&quot;  \r\n        style = &quot;width:435&quot; required = &quot;yes&quot; validate = &quot;url&quot;&gt; &lt;br \/&gt; \r\n    &lt;cftextarea name = &quot;description&quot;  \r\n        style = &quot;width:435; height:70&quot; required = &quot;yes&quot; \/&gt; \r\n \r\n    &lt;cfformitem type = &quot;text&quot;&gt; Enter Item 1&lt;\/cfformitem&gt; \r\n    &lt;cfinput type=&quot;text&quot; label=&quot;title&quot; name=&quot;item1title&quot;  \r\n        style=&quot;width:435&quot; required=&quot;yes&quot;&gt; &lt;br \/&gt; \r\n    &lt;cfinput type=&quot;text&quot; label=&quot;link&quot; name=&quot;item1link&quot;  \r\n        style=&quot;width:435&quot; required=&quot;yes&quot; validate=&quot;url&quot;&gt; &lt;br \/&gt; \r\n    &lt;cftextarea name = &quot;item1text&quot;  \r\n        style = &quot;width:435; height:70&quot; required = &quot;yes&quot; \/&gt; &lt;br \/&gt; \r\n \r\n    &lt;cfformitem type = &quot;text&quot;&gt; Enter Item 2&lt;\/cfformitem&gt; \r\n    &lt;cfinput type = &quot;text&quot; label = &quot;title&quot; name = &quot;item2title&quot; style = &quot;width:435&quot;&gt; &lt;br \/&gt; \r\n    &lt;cfinput type = &quot;text&quot; label = &quot;link&quot; name = &quot;item2link&quot; style = &quot;width:435&quot;  \r\n        validate = &quot;url&quot;&gt; &lt;br \/&gt; \r\n    &lt;cftextarea name = &quot;item2text&quot; style = &quot;width:435; height:70&quot; \/&gt; &lt;br \/&gt; \r\n     \r\n    &lt;cfinput type = &quot;Submit&quot; name = &quot;submit&quot; value = &quot;Submit&quot; &gt; \r\n&lt;\/cfform&gt;<br>The following application is a simple feed reader that handles RSS and Atom feeds. It displays the feed title; for each item or entry, it shows the title as a link, and shows the published date and the item or entry contents. To use this example to read the feed created by the first application, enter the URL for the file the application created, for example, http:\/\/localhost:8500\/cffeed\/feedTest\/createRSSOutput.xml.<br>&lt;!--- Process the feed data if the user submitted the form ---&gt; \r\n&lt;cfif isDefined(&quot;Form.Submit&quot;)&gt; \r\n    &lt;cffeed source = &quot;#theURL#&quot;  \r\n        properties = &quot;myProps&quot;  \r\n        query = &quot;myQuery&quot;&gt; \r\n \r\n    &lt;!--- Display the feed output.  \r\n            Use conditional logic for to handle different feed formats. ---&gt; \r\n    &lt;cfoutput&gt; \r\n        &lt;h2&gt;#myProps.title#&lt;\/h2&gt; \r\n    &lt;\/cfoutput&gt;     \r\n    &lt;cfoutput query = &quot;myQuery&quot;&gt; \r\n        &lt;cfif myProps.version IS &quot;atom_1.0&quot;&gt; \r\n            &lt;h3&gt;&lt;a href = &quot;#linkhref#&quot;&gt;#title#&lt;\/a&gt;&lt;\/h3&gt; \r\n            &lt;p&gt;&lt;b&gt;Published:&lt;\/b&gt; #DateFormat(publisheddate)#&lt;\/p&gt; \r\n        &lt;cfelse&gt; \r\n            &lt;h3&gt;&lt;a href = &quot;#rsslink#&quot;&gt;#title#&lt;\/a&gt;&lt;\/h3&gt; \r\n            &lt;p&gt;&lt;b&gt;Published:&lt;\/b&gt; #publisheddate#&lt;\/p&gt; \r\n        &lt;\/cfif&gt; \r\n        &lt;p&gt;#content#&lt;\/p&gt; \r\n    &lt;\/cfoutput&gt; \r\n&lt;\/cfif&gt; \r\n \r\n&lt;!--- The form for specifying the feed URL or file ---&gt; \r\n&lt;cfform name = &quot;SetFeed&quot; preserveData = &quot;yes&quot;&gt; \r\n        Enter Feed URL:  \r\n        &lt;cfinput type = &quot;text&quot; size = &quot;60&quot; name = &quot;theURL&quot;&gt;&lt;br&gt;&lt;br&gt; \r\n        &lt;cfinput type = &quot;Submit&quot; name = &quot;submit&quot; value = &quot;Submit&quot;&gt; \r\n&lt;\/cfform&gt;<br>","USAGE":"<!-- --><br>","Attribute":[{"REQOROPT":"Optional","DESCRIPTION":"The action to take, one of the following values: create: creates an RSS 2.0 or Atom 1.0 feed XML document and saves it in a variable, writes it to a file, or both. read: parses an RSS or Atom feed from a URL or an XML file and saves it in a structure or query. You can also get feed metadata in a separate structure.","default":"read","Attribute":"action"},{"REQOROPT":"Optional","DESCRIPTION":"Used only for the create action with a query attribute. A structure that specifies a mapping between the names of the columns in the object specified by the query attribute and the columns of the ColdFusion feed format (see the section Query object rules. The key for each field must be a column name (see the table in the Query object rules section). The value of the field must be the name of the corresponding column in the query object used as input to the create action.","default":"","Attribute":"columnMap"},{"REQOROPT":"Optional","DESCRIPTION":"Used only for the read action. Path to the directory in which to save any enclosures that are available in the feed being read. The path can be absolute or relative to the CFML file. If the directory does not exist, ColdFusion generates an error. If you omit this attribute, ColdFusion does not save enclosures. To specify the directory that contains the current page, set this attribute to “ .” (period).","default":"","Attribute":"enclosureDir"},{"REQOROPT":"Optional","DESCRIPTION":"Used only for the create action. If this attribute is true, escapes\/replaces all the invalid characters as per W3C specification. Note: Japanese characters that are not part of UTF-8 encoding are replaced. Non-UTF-8 Japanese characters remain in the feed as they are. If this attribute is false, does not escape invalid characters and tries to generate feed. If JDOM fails to write the file with these invalid characters, the error message “Invalid Character in Input” is displayed.","default":false,"Attribute":"escapeChars"},{"REQOROPT":"Optional","DESCRIPTION":"If this attribute is yes, ColdFusion attempts to save all enclosures. If it encounters an error downloading one enclosure, it continues downloading other enclosures and writes the error information in the server log. If this attribute is no, when ColdFusion encounters an error downloading an enclosure, it stops downloading all enclosures and generates an error. Note: Enclosure errors can occur if the specified enclosure is of a type that the web server does not allow to be downloaded.","default":false,"Attribute":"ignoreEnclosureError"},{"REQOROPT":"See Note","DESCRIPTION":"A structure that contains complete feed data: The output of a read action. The input definition of the feed to create. When you specify the name attribute for a create action, enclose it in number signs (#). For more information, see Name and properties structure rules section.","default":"","Attribute":"name"},{"REQOROPT":"See Note","DESCRIPTION":"Path of the file in which to write the feed as XML text. The path can be absolute, or relative to the CFML file.","default":"","Attribute":"outputFile"},{"REQOROPT":"Optional","DESCRIPTION":"Whether to overwrite the XML feed file if it exists. If you do not set this attribute to yes and the cffeed tag tries to write to a file that exists, ColdFusion generates an error.","default":false,"Attribute":"overwrite"},{"REQOROPT":"Optional","DESCRIPTION":"Used only for the read action. Whether to overwrite files in the enclosure directory if they exist. If you do not set this attribute to yes and the cffeed tag tries to write to a file that exists, ColdFusion generates an error.","default":false,"Attribute":"overwriteEnclosure"},{"REQOROPT":"See Note","DESCRIPTION":"A structure that contains the feed metadata, the information about the entire feed. Can contain either of the following: The output of a read action. Input to a create action. The properties and query attributes combined provide complete feed information. When you specify the properties attribute for a create action, enclose it in number signs (#). For more information, see Name and properties structure rules section.","default":"","Attribute":"properties"},{"REQOROPT":"Optional","DESCRIPTION":"Password required by the proxy server.","default":"","Attribute":"proxyPassword"},{"REQOROPT":"Optional","DESCRIPTION":"The port to connect to on the proxy server.","default":80,"Attribute":"proxyPort"},{"REQOROPT":"Optional","DESCRIPTION":"Host name or IP address of a proxy server to which to send the request.","default":"","Attribute":"proxyServer"},{"REQOROPT":"Optional","DESCRIPTION":"User name to provide to the proxy server.","default":"","Attribute":"proxyUser"},{"REQOROPT":"See Note","DESCRIPTION":"A query object that contains the Atom entries or RSS items in the feed. Can contain either of the following: The output of a read action. Input to a create action. The properties and query attributes combined provide complete feed information. When you specify the query attribute for a create action, enclose it in number signs (#). For more information, see section Query object rules.","default":"","Attribute":"query"},{"REQOROPT":"Required","DESCRIPTION":"Used only for the read action. The URL of the feed or the path to the XML file that contains the feed contents. A path can be absolute, or relative to the CFML file.","default":"","Attribute":"source"},{"REQOROPT":"Optional","DESCRIPTION":"The number of seconds to wait for a response from the feed source. A value of 0 specifies that the request does not time out. By default, ColdFusion uses the request time-out setting of the ColdFusion Administrator Server Settings > Settings page.","default":"Request time-out","Attribute":"timeout"},{"REQOROPT":"Optional","DESCRIPTION":"Text to put in the HTTP User-Agent request header field. Used to identify the request client software.","default":"Cold Fusion","Attribute":"userAgent"},{"REQOROPT":"See Note","DESCRIPTION":"A variable in which to save the read or created feed as XML text.","default":"","Attribute":"xmlVar"}]}