{"HISTORY":"","SYNTAX":"<!-- --><br>&lt;cfif expression&gt; \r\n    <i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">HTML and CFML tags<\/i>    &lt;cfelseif expression&gt; \r\n    <i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">HTML and CFML tags<\/i> \r\n    &lt;cfelse&gt; \r\n    <i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">HTML and CFML tags<\/i> \r\n&lt;\/cfif&gt;<br>","CATEGORY":"Flow-control tags","PAGENAME":"cfif","SEEALSO":"<!-- --><br><samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7fe6.html\">cfelse<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7fe7.html\">cfelseif<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7fde.html\">cfabort<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7fe1.html\">cfbreak<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7d56.html\">cfexecute<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7fdd.html\">cfexit<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7cac.html\">cflocation<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7fe2.html\">cfloop<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7fe5.html\">cfswitch<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7e25.html\">cfthrow<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7ec6.html\">cftry<\/a><\/samp><br>","DESCRIPTION":"Creates simple and compound conditional statements in CFML. Tests an expression, variable, function return value, or string. Used, optionally, with the cfelse and cfelseif tags.","LICENCE":"http:\/\/help.adobe.com\/en_US\/ColdFusion\/10.0\/LegalNotices\/index.html","EXAMPLE":"<!-- --><br>In this example, variables are shown within number signs. This is not required.<br>&lt;!--- This example shows the interaction of cfif, cfelse, and cfelseif. ---&gt; \r\n&lt;!----- First, perform a query to get some data. -----&gt;  \r\n&lt;cfquery name=&quot;getCenters&quot; datasource=&quot;cfdocexamples&quot;&gt;  \r\n    SELECT Center_ID, Name, Address1, Address2, City, State, Country, PostalCode,  \r\n        Phone, Contact \r\n    FROM Centers  \r\n    ORDER by City, State, Name  \r\n&lt;\/cfquery&gt;  \r\n&lt;p&gt;CFIF gives us the ability to perform conditional logic based on a condition  \r\n    or set of conditions.&lt;\/p&gt;  \r\n&lt;p&gt;For example, we can output the list of Centers from the snippets datasource  \r\n    by group and only display them &lt;b&gt;IF&lt;\/b&gt; City = San Diego.&lt;\/p&gt;  \r\n&lt;hr&gt;  \r\n&lt;!---- Use CFIF to test a condition when outputting a query. -----&gt;  \r\n&lt;p&gt;The following centers are in San Diego:&lt;\/p&gt;  \r\n&lt;cfoutput query=&quot;getCenters&quot;&gt;  \r\n        &lt;cfif Trim(City) is &quot;San Diego&quot;&gt;  \r\n            &lt;br&gt;&lt;b&gt;Name\/Address:&lt;\/b&gt;#Name#, #Address1#, #City#, #State# \r\n            &lt;br&gt;&lt;b&gt;Contact:&lt;\/b&gt; #Contact# \r\n            &lt;br&gt;  \r\n        &lt;\/cfif&gt;  \r\n&lt;\/cfoutput&gt;  \r\n&lt;hr&gt;  \r\n&lt;p&gt;If we would like more than one condition to be the case, we can ask for a list of the \r\ncenters in San Diego &lt;b&gt;OR&lt;\/b&gt; Santa Ana. If the center does not follow this condition, we \r\ncan use CFELSE to show only the names and cities of the other centers.&lt;\/p&gt; \r\n&lt;p&gt;Notice how a nested CFIF is used to specify the location of the  \r\n    featured site (Santa Ana or San Diego).&lt;\/p&gt; \r\n&lt;!----- Use CFIF to specify a conditional choice for multiple options;  \r\n    also note the nested CFIF. ---&gt;  \r\n&lt;p&gt;Complete information is shown for centers in San Diego or Santa Ana.  \r\n    All other centers are listed in italic:&lt;\/p&gt;  \r\n&lt;cfoutput query=&quot;getCenters&quot;&gt;  \r\n    &lt;cfif Trim(City) is &quot;San Diego&quot; OR Trim(City) is &quot;Santa Ana&quot;&gt;  \r\n        &lt;h4&gt;Featured Center in  \r\n            &lt;cfif Trim(City) is &quot;San Diego&quot;&gt;  \r\n                San Diego  \r\n            &lt;cfelse&gt;  \r\n                Santa Ana  \r\n            &lt;\/cfif&gt;  \r\n            &lt;\/h4&gt; &lt;b&gt;Name\/Address:&lt;\/b&gt;#Name#, #Address1#, #City#, #State# \r\n            &lt;br&gt;&lt;b&gt;Contact:&lt;\/b&gt; #Contact#&lt;br&gt;  \r\n    &lt;cfelse&gt;  \r\n        &lt;br&gt;&lt;i&gt;#Name#, #City#&lt;\/i&gt;  \r\n    &lt;\/cfif&gt;  \r\n&lt;\/cfoutput&gt;  \r\n&lt;hr&gt;  \r\n&lt;p&gt;Finally, we can use CFELSEIF to cycle through a number of conditions and  \r\nproduce varying output. Note that you can use CFCASE and CFSWITCH for a more \r\nelegant representation of this behavior.  \r\n&lt;!--- Use CFIF in conjunction with CFELSEIF to specify more than one  \r\n    branch in a conditional situation. ---&gt;  \r\n&lt;cfoutput query=&quot;getCenters&quot;&gt;  \r\n    &lt;cfif Trim(City) is &quot;San Diego&quot; OR Trim(City) is &quot;Santa Ana&quot;&gt;  \r\n        &lt;br&gt;&lt;i&gt;#Name#, #City#&lt;\/i&gt; (this one is in  \r\n                &lt;cfif Trim(City) is &quot;San Diego&quot;&gt;San Diego \r\n                &lt;cfelse&gt;Santa Ana \r\n                &lt;\/cfif&gt;)  \r\n            &lt;cfelseif Trim(City) is &quot;San Francisco&quot;&gt;  \r\n                &lt;br&gt;&lt;i&gt;#Name#, #City#&lt;\/i&gt; (this one is in San Francisco)  \r\n            &lt;cfelseif Trim(City) is &quot;Suisun&quot;&gt;  \r\n                &lt;br&gt;&lt;i&gt;#Name#, #City#&lt;\/i&gt; (this one is in Suisun)  \r\n            &lt;cfelse&gt; &lt;br&gt;&lt;i&gt;#Name#&lt;\/i&gt;  \r\n                &lt;b&gt;Not in a city we track&lt;\/b&gt;  \r\n            &lt;\/cfif&gt;  \r\n&lt;\/cfoutput&gt;<br>","USAGE":"<!-- --><br>If the value of the expression in the <samp class=\"codeph\">cfif<\/samp> tag is <samp class=\"codeph\">true<\/samp>, ColdFusion processes all the code that follows, up to any <samp class=\"codeph\">cfelseif<\/samp> or <samp class=\"codeph\">cfelse<\/samp> tag, and then skips to the <samp class=\"codeph\">cfif<\/samp> end tag. Otherwise, ColdFusion does not process the code that immediately follows the <samp class=\"codeph\">cfif<\/samp> tag, and continues processing at any <samp class=\"codeph\">cfelseif<\/samp> or <samp class=\"codeph\">cfelse<\/samp> tag, or with the code that follows the <samp class=\"codeph\">cfif<\/samp> end tag.<br>When testing the return value of a function that returns a Boolean, you do not have to define the True condition explicitly. This example uses the <samp class=\"codeph\">IsArray<\/samp> function:<br>&lt;cfif IsArray(myarray)&gt;<br>If successful, <samp class=\"codeph\">IsArray<\/samp> evaluates to yes, the string equivalent of the Boolean True. This is preferred over explicitly defining the True condition this way:<br>&lt;cfif IsArray(myarray) IS True&gt;<br>This tag requires an end tag.<br>","Attribute":[]}