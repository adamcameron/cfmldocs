{"HISTORY":"<!-- --><br>ColdFusion 8: Added this tag.<br>","SYNTAX":"<!-- --><br>&lt;cfinterface \r\n    displayName = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">descriptive name<\/i>&quot; \r\n    extends = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">interfaceName1[,interfaceName2]...<\/i>&quot; \r\n    Hint = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">hint text<\/i>&quot;&gt; \r\n        &lt;cffunction ...&gt; \r\n            &lt;cfargument ... &gt; \r\n            &lt;cfargument ... &gt; \r\n            ... \r\n        &lt;\/cffunction&gt;  \r\n        &lt;cffunction ...&gt; \r\n            ... \r\n        &lt;\/cffunction&gt;  \r\n        ... \r\n&lt;\/cfinterface&gt;<br>","CATEGORY":"Application framework tags, Extensibility tags","PAGENAME":"cfinterface","SEEALSO":"<!-- --><br><samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7e47.html\">cfargument<\/a><\/samp><samp class=\"codeph\">, <\/samp><samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7e0e.html\">cfcomponent<\/a><\/samp><samp class=\"codeph\">, <\/samp><samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7f5c.html\">cffunction<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7d9a.html\">GetComponentMetaData<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-74f8.html\">IsInstanceOf<\/a><\/samp><br>","DESCRIPTION":"Defines an interface that consists of a set of signatures for functions. The interface does not include the full function definitions; instead, you implement the functions in a ColdFusion component (CFC). The interfaces that you define by using this tag can make up the structure of a reusable application framework.","LICENCE":"http:\/\/help.adobe.com\/en_US\/ColdFusion\/10.0\/LegalNotices\/index.html","EXAMPLE":"<!-- --><br>The following example defines an IBasicMath interface with add, subtract, multiply, and divide operations. The integerMath CFC implements this interface by defining integer arithmetic versions of the operations. The testMath.cfm application uses the integerMath functions to do arithmetic calculations on two decimal numbers (using the values of pi and e).<br>As an exercise, consider modifying the interface definition to take and return values of any type, and then implement a second CFC that uses the <samp class=\"codeph\">PrecisionEvaluate<\/samp> function to calculate arbitrary precision arithmetic and return the results. (These versions are omitted for brevity.)<br>The IBasicMath.cfc file defines the interface as follows:<br>&lt;cfinterface&gt; \r\n    &lt;cffunction name = add returntype = &quot;numeric&quot; output = &quot;no&quot;  \r\n            description = &quot;Add two values&quot;&gt; \r\n        &lt;cfargument name = &quot;first&quot; type=&quot;numeric&quot; required = &quot;no&quot; default =&quot;0&quot;&gt; \r\n        &lt;cfargument name = &quot;second&quot; type = &quot;numeric&quot; required = &quot;no&quot; default = &quot;0&quot;&gt; \r\n    &lt;\/cffunction&gt; \r\n    &lt;cffunction name = subtract returntype = &quot;numeric&quot; output = &quot;no&quot;  \r\n            description = &quot;Subtract two values&quot;&gt; \r\n        &lt;cfargument name = &quot;first&quot; type = &quot;numeric&quot; required = &quot;no&quot; default = &quot;0&quot;&gt; \r\n        &lt;cfargument name =&quot;second&quot; type = &quot;numeric&quot; required = &quot;no&quot; default = &quot;0&quot;&gt; \r\n    &lt;\/cffunction&gt; \r\n    &lt;cffunction name = multiply returntype = &quot;numeric&quot; output = &quot;no&quot;  \r\n            description = &quot;Multiply two values&quot;&gt; \r\n        &lt;cfargument name = &quot;first&quot; type = &quot;numeric&quot; required = &quot;no&quot; default = &quot;0&quot;&gt; \r\n        &lt;cfargument name = &quot;second&quot; type = &quot;numeric&quot; required = &quot;no&quot; default = &quot;0&quot;&gt; \r\n    &lt;\/cffunction&gt; \r\n    &lt;cffunction name = divide returntype = &quot;numeric&quot; output = &quot;no&quot;  \r\n            description = &quot;Divide two values&quot;&gt; \r\n        &lt;cfargument name = &quot;first&quot; type = &quot;numeric&quot; required = &quot;no&quot; default=&quot;0&quot;&gt; \r\n        &lt;cfargument name = &quot;second&quot; type=&quot;numeric&quot; required = &quot;no&quot; default=&quot;1&quot;&gt; \r\n    &lt;\/cffunction&gt; \r\n&lt;\/cfinterface&gt;<br>The integerMath.cfc file defines the integerMath component, which implements the IBasicMath interface, as follows:<br>&lt;cfcomponent implements = &quot;IBasicMath&quot; &gt; \r\n    &lt;cffunction name = add returntype = &quot;numeric&quot; output = &quot;no&quot; \r\n            description = &quot;Add two values&quot;&gt; \r\n        &lt;cfargument name = &quot;first&quot; type = &quot;numeric&quot; required = &quot;no&quot; default = &quot;0&quot;&gt; \r\n        &lt;cfargument name = &quot;second&quot; type = &quot;numeric&quot; required = &quot;no&quot; default = &quot;0&quot;&gt; \r\n        &lt;cfreturn Round(first + second)&gt; \r\n    &lt;\/cffunction&gt; \r\n    &lt;cffunction name = subtract returntype = &quot;numeric&quot; output = &quot;no&quot; \r\n            description = &quot;Subtract two values&quot;&gt; \r\n        &lt;cfargument name = &quot;first&quot; type = &quot;numeric&quot; required = &quot;no&quot; default = &quot;0&quot;&gt; \r\n        &lt;cfargument name = &quot;second&quot; type = &quot;numeric&quot; required = &quot;no&quot; default = &quot;0&quot;&gt; \r\n        &lt;cfreturn Round(first - second)&gt; \r\n    &lt;\/cffunction&gt; \r\n    &lt;cffunction name = multiply returntype = &quot;numeric&quot; output = &quot;no&quot; \r\n            description = &quot;Multiply two values&quot;&gt; \r\n        &lt;cfargument name = &quot;first&quot; type = &quot;numeric&quot; required = &quot;no&quot; default = &quot;0&quot;&gt; \r\n        &lt;cfargument name = &quot;second&quot; type = &quot;numeric&quot; required = &quot;no&quot; default = &quot;0&quot;&gt; \r\n        &lt;cfreturn Round(first * second)&gt; \r\n    &lt;\/cffunction&gt; \r\n    &lt;cffunction name = divide returntype = &quot;numeric&quot; output = &quot;no&quot; \r\ndescription = &quot;Divide two values&quot;&gt; \r\n        &lt;cfargument name = &quot;first&quot; type = &quot;numeric&quot; required = &quot;no&quot; default = &quot;0&quot;&gt; \r\n        &lt;cfargument name = &quot;second&quot; type = &quot;numeric&quot; required = &quot;no&quot; default = &quot;1&quot;&gt; \r\n        &lt;cfreturn Round(first \/ second)&gt; \r\n    &lt;\/cffunction&gt; \r\n&lt;\/cfcomponent&gt;<br>The testMath.cfm file uses the integerMath component methods to calculate integer values, as follows:<br>&lt;cfscript&gt; \r\n    arguments = StructNew(); \r\n    arguments.first = pi(); \r\n    arguments.second = &quot;2.718281828459045235360287471352&quot;; \r\n&lt;\/cfscript&gt; \r\n \r\n&lt;cfobject name = &quot;iMathObj&quot; component = &quot;integerMath&quot;&gt; \r\n&lt;cfoutput&gt; \r\n&lt;h3&gt;Function Arguments&lt;\/h3&gt; \r\nargument 1: #arguments.first#&lt;br&gt; \r\nargument 2: #arguments.second#&lt;br&gt; \r\n \r\n&lt;h3&gt;Addition&lt;\/h3&gt; \r\n#iMathObj.add(argumentCollection = arguments)# \r\n&lt;h3&gt;Subtraction&lt;\/h3&gt; \r\n#iMathObj.subtract(argumentCollection = arguments)# \r\n&lt;h3&gt;Multiplication&lt;\/h3&gt; \r\n#iMathObj.multiply(argumentCollection = arguments)# \r\n&lt;h3&gt;Division&lt;\/h3&gt; \r\n#iMathObj.divide(argumentCollection = arguments)# \r\n&lt;\/cfoutput&gt;<br>","USAGE":"<!-- --><br>The <samp class=\"codeph\">cfinterface<\/samp> tag declares a set of related functions that any ColdFusion component (CFC) that implements the interface must define. The interface specifies function signatures, but does not implement the functions; instead, the CFC that implements the interface must contain the full function definitions.<br>For example, you could create a create, read, update, and delete (CRUD) interface that defines the basic signatures of the four operations. All components that implement the interface must then conform to the interface signatures. You can then implement the interface in different components to manage different types of data sources. Because all the components implement the same interface, you can ensure that you can easily replace one component with another, depending on the specific data source that an individual application requires.<br>You define an interface by creating a ColdFusion file with a .cfc extension and specifying the <samp class=\"codeph\">cfinterface<\/samp> tag as the first and only top-level tag in the file. The filename determines the interface name, so myInterface.cfc defines the myInterface interface. You can specify any attributes in the <samp class=\"codeph\">cfinterface<\/samp> tag; however, only the names listed in the Attributes table are meaningful to ColdFusion. The filename must not contain commas, or any periods except for the separator before the .cfc extension.<br>Inside the <samp class=\"codeph\">cfinterface<\/samp> tag body, you specify the interface by declaring the functions of the interface. The interface definition must follow these basic rules:<br><li><p>The <samp class=\"codeph\">cfinterface<\/samp> tag body can contain only <samp class=\"codeph\">cffunction<\/samp> tags and comments. <\/p> <\/li> \n<li><p>The <samp class=\"codeph\">cffunction<\/samp> tag bodies can contain only <samp class=\"codeph\">cfargument<\/samp> tags, which declare the function arguments, and comments.<\/p> <\/li> \n<li><p>The <samp class=\"codeph\">cffunction<\/samp> tag body is optional. <\/p> <\/li><br>The following example shows the general format of an interface definition:<br>&lt;cfinterface extends=&quot;IBasicInterface&quot;&gt; \r\n    &lt;cffunction name=&quot;hello&quot; description=&quot;Should print a greeting containing the input \r\n         argument or 'world'.&quot;&gt; \r\n        &lt;cfargument name=&quot;whom&quot; type=&quot;string&quot; default=&quot;world&quot;&gt; \r\n    &lt;\/cffunction&gt; \r\n    &lt;cffunction name=&quot;calculateTwo&quot; returnType=&quot;numeric&quot; output=&quot;no&quot; \r\n            description=&quot;calculates a result using two numbers and returns the result&quot;&gt; \r\n        &lt;cfargument name=&quot;first&quot; type=&quot;numeric&quot; required=&quot;yes&quot;\/&gt; \r\n        &lt;cfargument name=&quot;second&quot; type=&quot;numeric&quot; required=&quot;no&quot; default=&quot;0&quot;\/&gt; \r\n    &lt;\/cffunction&gt; \r\n    &lt;cffunction name=&quot;disclaimer&quot;\/&gt; \r\n&lt;\/cfinterface&gt;<br>This interface extends the IBasicInterface interface, so any component that implements this interface must also implement the methods of the IBasicInterface interface. This interface requires the component to implement the following three functions:<br><li><p>A <samp class=\"codeph\">hello<\/samp> function that can optionally take a single string argument, which has a default value of <samp class=\"codeph\">&quot;world&quot;<\/samp>.<\/p> <\/li> \n<li><p>A <samp class=\"codeph\">calculateTwo<\/samp> function that takes one required numeric argument, has an optional numeric argument with a default value of 0, and must return a number.<\/p> <\/li> \n<li><p>A disclaimer function that takes no arguments and returns any type.<\/p> <\/li><br>The CFC that implements an interface specifies the interface name in the <samp class=\"codeph\">cfcomponent<\/samp> tag’s <samp class=\"codeph\">implements<\/samp> attribute. It must implement all of the interface’s methods as specified in the interface <samp class=\"codeph\">cffunction<\/samp> tags. The order of function arguments in the interface definition and the component definition must be identical.<br>The following table lists the attributes that you can use in the <samp class=\"codeph\">cffunction<\/samp> and <samp class=\"codeph\">cfargument<\/samp> tags, and describes the requirements and limitations on how you can use them in the interface definition and the component implementation:<br><table border=\"1\" cellpadding=\"4\" cellspacing=\"0\">\n <thead align=\"left\">\n  <tr>\n   <th valign=\"top\" width=\"NaN%\" id=\"d17e56260\"><p>Attribute<\/p> <\/th> \n   <th valign=\"top\" width=\"NaN%\" id=\"d17e56263\"><p>Interface requirements<\/p> <\/th> \n   <th valign=\"top\" width=\"NaN%\" id=\"d17e56266\"><p>Implementation requirements<\/p> <\/th> \n  <\/tr> \n <\/thead> \n <tbody>\n  <tr>\n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56260 \"><p><strong>cffunction<\/strong><\/p> <\/td> \n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56263 \"><p>&nbsp;<\/p> <\/td> \n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56266 \"><p>&nbsp;<\/p> <\/td> \n  <\/tr> \n  <tr>\n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56260 \"><p><samp class=\"codeph\">access<\/samp><\/p> <\/td> \n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56263 \"><p>Optional; only <samp class=\"codeph\">public<\/samp> is allowed<\/p> <\/td> \n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56266 \"><p>Optional; can be <samp class=\"codeph\">public<\/samp><samp class=\"codeph\">or<\/samp><samp class=\"codeph\">remote<\/samp><samp class=\"codeph\">.<\/samp><\/p> <\/td> \n  <\/tr> \n  <tr>\n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56260 \"><p><samp class=\"codeph\">description<\/samp><\/p> <\/td> \n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56263 \"><p>Optional<\/p> <\/td> \n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56266 \"><p>Can differ from value in interface.<\/p> <\/td> \n  <\/tr> \n  <tr>\n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56260 \"><p><samp class=\"codeph\">displayName<\/samp><\/p> <\/td> \n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56263 \"><p>Optional<\/p> <\/td> \n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56266 \"><p>Can differ from value in interface.<\/p> <\/td> \n  <\/tr> \n  <tr>\n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56260 \"><p><samp class=\"codeph\">hint<\/samp><\/p> <\/td> \n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56263 \"><p>Optional<\/p> <\/td> \n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56266 \"><p>Can differ from value in interface.<\/p> <\/td> \n  <\/tr> \n  <tr>\n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56260 \"><p><samp class=\"codeph\">name<\/samp><\/p> <\/td> \n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56263 \"><p>Required<\/p> <\/td> \n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56266 \"><p>Must be identical to value in interface.<\/p> <\/td> \n  <\/tr> \n  <tr>\n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56260 \"><p><samp class=\"codeph\">output<\/samp><\/p> <\/td> \n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56263 \"><p>Optional<\/p> <\/td> \n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56266 \"><p>Must be identical to value in interface.<\/p> <p>If you omit this attribute in the interface, you must omit it in the implementation.<\/p> <\/td> \n  <\/tr> \n  <tr>\n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56260 \"><p><samp class=\"codeph\">returnType<\/samp><\/p> <\/td> \n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56263 \"><p>Optional<\/p> <\/td> \n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56266 \"><p>Must be identical to value in interface; however, an omitted <samp class=\"codeph\">type<\/samp> option and an option value of <samp class=\"codeph\">any<\/samp> are equivalent and ColdFusion treats them as a match.<\/p> <\/td> \n  <\/tr> \n  <tr>\n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56260 \"><p><samp class=\"codeph\">roles<\/samp><\/p> <\/td> \n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56263 \"><p>Not allowed<\/p> <\/td> \n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56266 \"><p>Can be any valid value.<\/p> <\/td> \n  <\/tr> \n  <tr>\n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56260 \"><p><strong>cfargument<\/strong><\/p> <\/td> \n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56263 \"><p>&nbsp;<\/p> <\/td> \n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56266 \"><p>&nbsp;<\/p> <\/td> \n  <\/tr> \n  <tr>\n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56260 \"><p><samp class=\"codeph\"><i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">default<\/i><\/samp><\/p> <\/td> \n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56263 \"><p>Optional<\/p> <\/td> \n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56266 \"><p>Must be identical to value in interface.<\/p> <p>If you omit this attribute in the interface, you can specify any value in the implementation.<\/p> <\/td> \n  <\/tr> \n  <tr>\n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56260 \"><p><samp class=\"codeph\">displayName<\/samp><\/p> <\/td> \n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56263 \"><p>Optional<\/p> <\/td> \n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56266 \"><p>Can differ from value in interface<\/p> <\/td> \n  <\/tr> \n  <tr>\n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56260 \"><p><samp class=\"codeph\">hint<\/samp><\/p> <\/td> \n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56263 \"><p>Optional<\/p> <\/td> \n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56266 \"><p>Can differ from value in interface<\/p> <\/td> \n  <\/tr> \n  <tr>\n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56260 \"><p><samp class=\"codeph\">name<\/samp><\/p> <\/td> \n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56263 \"><p>Required<\/p> <\/td> \n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56266 \"><p>Must be identical to value in interface.<\/p> <\/td> \n  <\/tr> \n  <tr>\n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56260 \"><p><samp class=\"codeph\">required<\/samp><\/p> <\/td> \n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56263 \"><p>Optional<\/p> <\/td> \n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56266 \"><p>If the interface specifies <samp class=\"codeph\">yes<\/samp>, this attribute must also specify <samp class=\"codeph\">yes<\/samp>. If the interface specifies <samp class=\"codeph\">no<\/samp> or omits this attribute, you can specify <samp class=\"codeph\">no<\/samp> or omit the attribute.<\/p> <\/td> \n  <\/tr> \n  <tr>\n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56260 \"><p><samp class=\"codeph\">type<\/samp><\/p> <\/td> \n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56263 \"><p>Optional<\/p> <\/td> \n   <td valign=\"top\" width=\"NaN%\" headers=\"d17e56266 \"><p>Must be identical to value in interface; however, an omitted <samp class=\"codeph\">type<\/samp> option and an option value of <samp class=\"codeph\">any<\/samp> are equivalent and ColdFusion treats them as a match.<\/p> <\/td> \n  <\/tr> \n <\/tbody> \n<\/table><br>A CFC can implement multiple interfaces.<br><span class=\"notetitle\">Note: <\/span>If a CFC implements multiple interfaces and two or more of the interfaces define functions with identical names, the signatures of these functions must be the same in all the interfaces; ColdFusion does not support function overloading.<br>ColdFusion uses the same rules to locate interfaces as it does to locate components. You can use the <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7d9a.html\">GetComponentMetaData<\/a><\/samp> function to get information about an interface.<br>Adobe recommends that you use a consistent technique for identifying interface names, for example, by always starting the file (and therefore interface) name with a capital I. Any component that implements only that single interface could have a similar name, for example the same root prefixed by a capital C. You could have an IresourceInfo.cfc interface file and a corresponding CresourceInfo.cfc component file, for example.<br>","Attribute":[{"REQOROPT":"Optional","DESCRIPTION":"A value to be displayed when using introspection to show a descriptive name for the interface.","default":"","Attribute":"displayName"},{"REQOROPT":"Optional","DESCRIPTION":"A comma-delimited list of one or more interfaces that this interface extends. Any CFC that implements an interface must also implement all the functions in the interfaces specified by this property. If an interface extends another interface, and the child interface specifies a function with the same name as one in the parent interface, both functions must have the same attributes; otherwise ColdFusion generates an error.","default":"","Attribute":"extends"},{"REQOROPT":"Optional","DESCRIPTION":"Text to be displayed when using introspection to show information about the interface. The hint attribute value follows the syntax line in the function description.","default":"","Attribute":"hint"}]}