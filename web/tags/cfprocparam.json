{"HISTORY":"<!-- --><br>ColdFusion MX:<br><li><p>The <samp class=\"codeph\">maxrows<\/samp> attribute is obsolete. <\/p> <\/li> \n<li><p>Changed the <samp class=\"codeph\">dbvarname<\/samp> attribute behavior: it is now ignored for all drivers. ColdFusion uses JDBC 2.2 and does not support named parameters. This is deprecated. <\/p> <\/li> \n<li><p>Changed the <samp class=\"codeph\">maxLength<\/samp> attribute behavior: it now applies to IN and INOUT parameter values.<\/p> <\/li><br>","SYNTAX":"<!-- --><br>&lt;cfprocparam  \r\n    CFSQLType = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">parameter data type<\/i>&quot; \r\n    maxLength = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">length<\/i>&quot; \r\n    null = &quot;yes|no&quot; \r\n    scale = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">decimal places<\/i>&quot;  \r\n    type = &quot;in|out|inout&quot; \r\n    value = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">parameter value<\/i>&quot; \r\n    variable = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">variable name<\/i>&quot;&gt;<br><span class=\"notetitle\">Note: <\/span>You can specify this tag’s attributes in an \n<samp class=\"codeph\">attributeCollection<\/samp> attribute whose value is a structure. Specify the structure name in the \n<samp class=\"codeph\">attributeCollection<\/samp> attribute and use the tag’s attribute names as structure keys.<br>","CATEGORY":"Database manipulation tags","PAGENAME":"cfprocparam","SEEALSO":"<!-- --><br><samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7c78.html\">cfinsert<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7f95.html\">cfprocresult<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7fae.html\">cfquery<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7f6f.html\">cfqueryparam<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7d55.html\">cfstoredproc<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7c6b.html\">cftransaction<\/a><\/samp>, <samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7c6a.html\">cfupdate<\/a><\/samp>; <a href=\"http:\/\/help.adobe.com\/en_US\/ColdFusion\/9.0\/Developing\/WSc3ff6d0ea77859461172e0811cbec22c24-702b.html\" target=\"_self\">Optimizing ColdFusion applications<\/a> in <a href=\"http:\/\/help.adobe.com\/en_US\/ColdFusion\/9.0\/Developing\/WSc3ff6d0ea77859461172e0811cbec22c24-7e19.html\" target=\"_self\">Designing and Optimizing a ColdFusion Application<\/a> in the <i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">Developing ColdFusion Applications<\/i><br>","DESCRIPTION":"Defines stored procedure parameters. This tag is nested within a cfstoredproc tag.","LICENCE":"http:\/\/help.adobe.com\/en_US\/ColdFusion\/10.0\/LegalNotices\/index.html","EXAMPLE":"<!-- --><br>The following examples list the equivalent Oracle and Microsoft SQL Server stored procedures that insert data into the database. The CFML to invoke either stored procedure is the same.<br>The following example shows the Oracle stored procedure:<br>CREATE OR REPLACE PROCEDURE Insert_Book ( \r\n    arg_Title Books.Title%type, \r\n    arg_Price Books.Price%type, \r\n    arg_PublishDate Books.PublishDate%type, \r\n    arg_BookID OUT Books.BookID%type) \r\nAS \r\n    num_BookID NUMBER; \r\nBEGIN \r\n    SELECT seq_Books.NEXTVAL \r\n    INTO num_BookID \r\n    FROM DUAL; \r\n \r\n    INSERT INTO \r\n        Books ( \r\n            BookID, \r\n            Title, \r\n            Price, \r\n            PublishDate ) \r\n    VALUES ( \r\n        num_BookID, \r\n        arg_Title, \r\n        arg_Price, \r\n        arg_PublishDate ); \r\n \r\n    arg_BookID := num_BookID; \r\nEND; \r\n\/<br>The following example shows the SQL Server stored procedure:<br>CREATE PROCEDURE Insert_Book ( \r\n    @arg_Title VARCHAR(255), \r\n    @arg_Price SMALLMONEY, \r\n    @arg_PublishDate DATETIME, \r\n    @arg_BookID INT OUT) \r\nAS \r\nBEGIN \r\nINSERT INTO \r\n    Books ( \r\n        Title, \r\n        Price, \r\n        PublishDate ) \r\n    VALUES ( \r\n        @arg_Title, \r\n        @arg_Price, \r\n        @arg_PublishDate ); \r\n \r\n    SELECT @arg_BookID = @@IDENTITY; \r\nEND;<br>You use the following CFML code to call either stored procedure:<br>&lt;cfset ds = &quot;sqltst&quot;&gt; \r\n&lt;!--- &lt;cfset ds = &quot;oratst&quot;&gt; ---&gt; \r\n \r\n&lt;!--- If submitting a new book, insert the record and display confirmation ---&gt; \r\n&lt;cfif isDefined(&quot;form.title&quot;)&gt; \r\n    &lt;cfstoredproc procedure=&quot;Insert_Book&quot; datasource=&quot;#ds#&quot;&gt; \r\n        &lt;cfprocparam cfsqltype=&quot;cf_sql_varchar&quot; value=&quot;#form.title#&quot;&gt; \r\n        &lt;cfprocparam cfsqltype=&quot;cf_sql_numeric&quot; value=&quot;#form.price#&quot;&gt; \r\n        &lt;cfprocparam cfsqltype=&quot;cf_sql_date&quot; value=&quot;#form.price#&quot;&gt; \r\n        &lt;cfprocparam cfsqltype=&quot;cf_sql_numeric&quot; type=&quot;out&quot; variable=&quot;bookId&quot;&gt; \r\n    &lt;\/cfstoredproc&gt; \r\n \r\n&lt;cfoutput&gt; \r\n    &lt;h3&gt;'#form.title#' inserted into database.The ID is #bookId#.&lt;\/h3&gt; \r\n&lt;\/cfoutput&gt; \r\n \r\n&lt;\/cfif&gt; \r\n&lt;cfform action=&quot;#CGI.SCRIPT_NAME#&quot; method=&quot;post&quot;&gt; \r\n    &lt;h3&gt;Insert a new book&lt;\/h3&gt; \r\n \r\n    Title:  \r\n    &lt;cfinput type=&quot;text&quot; size=&quot;20&quot; required=&quot;yes&quot; name=&quot;title&quot;\/&gt; \r\n    &lt;br\/&gt; \r\n \r\n    Price:  \r\n    &lt;cfinput type=&quot;text&quot; size=&quot;20&quot; required=&quot;yes&quot; name=&quot;price&quot; validate=&quot;float&quot;\/&gt; \r\n    &lt;br\/&gt; \r\n \r\n    Publish Date:  \r\n    &lt;cfinput type=&quot;text&quot; size=&quot;5&quot; required=&quot;yes&quot; name=&quot;publishDate&quot; validate=&quot;date&quot;\/&gt; \r\n    &lt;br\/&gt; \r\n \r\n    &lt;input type=&quot;submit&quot; value=&quot;Insert Book&quot;\/&gt; \r\n \r\n&lt;\/cfform&gt;<br>","USAGE":"<!-- --><br>Use this tag to identify stored procedure parameters and their data types. Code one <samp class=\"codeph\">cfprocparam<\/samp> tag for each parameter. The parameters that you code vary based on parameter type and DBMS. ColdFusion supports positional parameters. If you use positional parameters, you must code <samp class=\"codeph\">cfprocparam<\/samp> tags in the same order as the associated parameters in the stored procedure definition.<br>Output variables are stored in the ColdFusion variable specified by the <samp class=\"codeph\">variable<\/samp> attribute.<br>You cannot use the <samp class=\"codeph\">cfprocparam<\/samp> tag for Oracle 8 and 9 reference cursors. Instead, use the <samp class=\"codeph\">cfprocresult<\/samp> tag.<br>","Attribute":[{"REQOROPT":"Required","DESCRIPTION":"SQL type to which the parameter (any type) is bound. ColdFusion supports the following values, where the last element of the name corresponds to the SQL data type. Different database systems might support different subsets of this list. For information on supported parameter types, see your DBMS documentation. CF_SQL_BIGINT CF_SQL_BIT CF_SQL_BLOB CF_SQL_CHAR CF_SQL_CLOB CF_SQL_DATE CF_SQL_DECIMAL CF_SQL_DOUBLE CF_SQL_FLOAT CF_SQL_IDSTAMP CF_SQL_INTEGER CF_SQL_LONGVARCHAR CF_SQL_MONEY CF_SQL_MONEY4 CF_SQL_NUMERIC CF_SQL_REAL CF_SQL_REFCURSOR CF_SQL_SMALLINT CF_SQL_TIME CF_SQL_TIMESTAMP CF_SQL_TINYINT CF_SQL_VARCHAR For a mapping of ColdFusion SQL data types to JDBC data types, see cfqueryparam.","default":"","Attribute":"CFSQLType"},{"REQOROPT":"Optional","DESCRIPTION":"Maximum length of a string or character IN or INOUT value attribute. A maxLength of 0 allows any length. The maxLength attribute is not required when specifying type=out.","default":0,"Attribute":"maxLength"},{"REQOROPT":"Optional","DESCRIPTION":"Whether the parameter is passed in as a null value. Not used with OUT type parameters. yes: tag ignores the value attribute. no","default":false,"Attribute":"null"},{"REQOROPT":"Optional","DESCRIPTION":"Number of decimal places in numeric parameter. A scale of 0 limits the value to an integer.","default":0,"Attribute":"scale"},{"REQOROPT":"Optional","DESCRIPTION":"in: the parameter is used to send data to the database system only. Passes the parameter by value. out: the parameter is used to receive data from the database system only. Passes the parameter as a bound variable. inout: the parameter is used to send and receive data. Passes the parameter as a bound variable.","default":"in","Attribute":"type"},{"REQOROPT":"Required if type=\"IN\"","DESCRIPTION":"Value that ColdFusion passes to the stored procedure. This is optional for inout parameters.","default":"","Attribute":"value"},{"REQOROPT":"Required if type=\"OUT\" or \"INOUT\"","DESCRIPTION":"ColdFusion variable name; references the value that the output parameter has after the stored procedure is called. This is ignored for in parameters.","default":"","Attribute":"variable"}]}