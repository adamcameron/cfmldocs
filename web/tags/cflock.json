{"HISTORY":"<!-- --><br>ColdFusion 8: Added <samp class=\"codeph\">Request<\/samp> value to <samp class=\"codeph\">scope<\/samp> attribute.<br>","SYNTAX":"<!-- --><br>&lt;cflock  \r\n    timeout = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">time-out in seconds<\/i>&quot; \r\n    name = &quot;<i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">lock name<\/i>&quot; \r\n    scope = &quot;Application|Server|Session|Request&quot; \r\n    throwOnTimeout = &quot;yes|no&quot; \r\n    type = &quot;readOnly|exclusive&quot;&gt;  \r\n    &lt;!--- CFML to be synchronized. ---&gt;  \r\n&lt;\/cflock&gt;<br><span class=\"notetitle\">Note: <\/span>You can specify this tag’s attributes in an \n<samp class=\"codeph\">attributeCollection<\/samp> attribute whose value is a structure. Specify the structure name in the \n<samp class=\"codeph\">attributeCollection<\/samp> attribute and use the tag’s attribute names as structure keys.<br>","CATEGORY":"Application framework tags","PAGENAME":"cflock","SEEALSO":"<!-- --><br><samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7d69.html\">cfapplication<\/a><\/samp><samp class=\"codeph\">, <\/samp><samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7f5b.html\">cfassociate<\/a><\/samp><samp class=\"codeph\">, <\/samp><samp class=\"codeph\"><a href=\"WSc3ff6d0ea77859461172e0811cbec22c24-7ea2.html\">cfmessagebox<\/a><\/samp><samp class=\"codeph\">,<\/samp><samp class=\"codeph\"><a href=\"http:\/\/help.adobe.com\/en_US\/ColdFusion\/9.0\/Developing\/WSc3ff6d0ea77859461172e0811cbec22c24-7fd4.html\" target=\"_self\">Using Persistent Data and Locking<\/a><\/samp> in the <i xmlns:fn=\"http:\/\/www.w3.org\/2005\/xpath-functions\" xmlns:fo=\"http:\/\/www.w3.org\/1999\/XSL\/Format\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">Developing ColdFusion Applications<\/i><br>","DESCRIPTION":"Ensures the integrity of shared data. Instantiates the following kinds of locks:","LICENCE":"http:\/\/help.adobe.com\/en_US\/ColdFusion\/10.0\/LegalNotices\/index.html","EXAMPLE":"<!-- --><br>&lt;!---  \r\nThis example shows how cflock can guarantee consistency of data updates to variables in the \r\n    Application, Server, and Session scopes. ---&gt; \r\n \r\n&lt;!--- Copy the following code into an Application.cfm file in the  \r\n    application root directory. ---&gt; \r\n&lt;!----------------   Beginning of Application.cfm code   ---------------&gt; \r\n&lt;!--- cfapplication defines scoping for a ColdFusion application and enables or disables \r\n    storing of application and session variables. Put this tag in a special file called \r\n    Application.cfm. It is run before any other ColdFusion page in its directory. ---&gt; \r\n \r\n&lt;!--- Enable session management for this application. ---&gt; \r\n&lt;cfapplication name = &quot;ETurtle&quot;  \r\n    sessionTimeout = #CreateTimeSpan(0,0, 0, 60)#  \r\n    sessionManagement = &quot;yes&quot;&gt; \r\n \r\n&lt;!--- Initialize session and application variables used by E-Turtleneck. Use session scope \r\n    for the session variables. ---&gt;  \r\n&lt;cflock scope = &quot;Session&quot;  \r\n    timeout = &quot;30&quot; type = &quot;Exclusive&quot;&gt; \r\n    &lt;cfif NOT IsDefined(&quot;session.size&quot;)&gt; \r\n        &lt;cfset session.size = &quot;&quot;&gt; \r\n    &lt;\/cfif&gt; \r\n    &lt;cfif NOT IsDefined(&quot;session.color&quot;)&gt; \r\n        &lt;cfset session.color = &quot;&quot;&gt; \r\n    &lt;\/cfif&gt; \r\n&lt;\/cflock&gt; \r\n \r\n&lt;!--- Use an application lock for the application-wide variable that keeps track of the \r\n    number of turtlenecks sold. For a more efficient, but more complex, way of handling \r\n    Application scope locking, see the &quot;Developing ColdFusion Applications&quot;---&gt; \r\n&lt;cflock scope = &quot;Application&quot; timeout = &quot;30&quot; type = &quot;Exclusive&quot;&gt; \r\n    &lt;cfif NOT IsDefined(&quot;application.number&quot;)&gt; \r\n        &lt;cfset application.number = 0&gt; \r\n    &lt;\/cfif&gt; \r\n&lt;\/cflock&gt; \r\n \r\n&lt;!----------------------- End of Application.cfm -----------------------&gt; \r\n \r\n&lt;h3&gt;cflock Example&lt;\/h3&gt; \r\n \r\n&lt;cfif IsDefined(&quot;form.submit&quot;)&gt; \r\n&lt;!--- The form has been submitted; process the request. ---&gt; \r\n    &lt;cfoutput&gt; \r\n        Thanks for shopping E-Turtleneck. You chose size &lt;b&gt;#form.size#&lt;\/b&gt;,  \r\n        color &lt;b&gt;#form.color#&lt;\/b&gt;.&lt;br&gt;&lt;br&gt; \r\n    &lt;\/cfoutput&gt; \r\n \r\n&lt;!--- Lock the code that assigns values to session variables. ----&gt;  \r\n    &lt;cflock scope = &quot;Session&quot; timeout = &quot;30&quot; type = &quot;Exclusive&quot;&gt; \r\n        &lt;cfparam name = session.size Default = #form.size#&gt; \r\n        &lt;cfparam name = session.color Default = #form.color#&gt; \r\n    &lt;\/cflock&gt; \r\n \r\n&lt;!---- Lock the code that updates the Application scope number of turtlenecks sold. ---&gt;  \r\n    &lt;cflock scope = &quot;Application&quot; timeout = &quot;30&quot; type = &quot;Exclusive&quot;&gt; \r\n        &lt;cfset application.number = application.number + 1&gt; \r\n    &lt;cfoutput&gt; \r\n        E-Turtleneck has now sold #application.number# turtlenecks! \r\n    &lt;\/cfoutput&gt; \r\n    &lt;\/cflock&gt; \r\n \r\n&lt;cfelse&gt; \r\n&lt;!--- Show the form only if it has not been submitted. ---&gt; \r\n    &lt;cflock scope = &quot;Application&quot; timeout = &quot;30&quot; type = &quot;Readonly&quot;&gt; \r\n        &lt;cfoutput&gt; \r\n            E-Turtleneck has sold #application.number# turtlenecks to date. \r\n        &lt;\/cfoutput&gt; \r\n    &lt;\/cflock&gt; \r\n \r\n    &lt;form method=&quot;post&quot; action=&quot;cflocktest.cfm&quot;&gt; \r\n        &lt;p&gt;Congratulations! You selected the most comfortable turtleneck in the world. \r\n        Please select color and size.&lt;\/p&gt;  \r\n        &lt;table cellspacing = &quot;2&quot; cellpadding = &quot;2&quot; border = &quot;0&quot;&gt; \r\n            &lt;tr&gt; \r\n                &lt;td&gt;Select a color.&lt;\/td&gt; \r\n                &lt;td&gt;&lt;select type = &quot;Text&quot; name = &quot;color&quot;&gt; \r\n                        &lt;option&gt;red \r\n                        &lt;option&gt;white \r\n                        &lt;option&gt;blue \r\n                        &lt;option&gt;turquoise \r\n                        &lt;option&gt;black \r\n                        &lt;option&gt;forest green \r\n                    &lt;\/select&gt; \r\n                &lt;\/td&gt; \r\n            &lt;\/tr&gt; \r\n            &lt;tr&gt; \r\n                &lt;td&gt;Select a size.&lt;\/td&gt; \r\n                &lt;td&gt;&lt;select type = &quot;Text&quot; name = &quot;size&quot; &gt; \r\n                        &lt;option&gt;XXsmall \r\n                        &lt;option&gt;Xsmall \r\n                        &lt;option&gt;small \r\n                        &lt;option&gt;medium \r\n                        &lt;option&gt;large \r\n                        &lt;option&gt;Xlarge \r\n                    &lt;\/select&gt; \r\n                &lt;\/td&gt; \r\n            &lt;\/tr&gt; \r\n            &lt;tr&gt; \r\n                &lt;td&gt;Press Submit when you are finished making your selection.&lt;\/td&gt; \r\n                &lt;td&gt;&lt;input type = &quot;Submit&quot; name = &quot;submit&quot; value = &quot;Submit&quot;&gt; &lt;\/td&gt; \r\n            &lt;\/tr&gt; \r\n        &lt;\/table&gt; \r\n    &lt;\/form&gt; \r\n&lt;\/cfif&gt;<br>","USAGE":"<!-- --><br>ColdFusion is a multi-threaded server; it can process multiple page requests at a time. Use the <samp class=\"codeph\">cflock<\/samp> tag for these purposes:<br><li><p>To ensure that modifications to shared data and objects made in concurrently executing requests occur sequentially.<\/p> <\/li> \n<li><p>Around file manipulation constructs, to ensure that file updates do not fail because files are open for writing by other applications or tags.<\/p> <\/li> \n<li><p>Around CFX invocations, to ensure that ColdFusion can safely invoke CFXs that are not implemented in a thread-safe manner. (This applies only to CFXs developed in C++.) <\/p> <p>To work safely with ColdFusion, a C++ CFX that maintains and manipulates shared (global) data structures must be made thread-safe; however, this requires advanced knowledge. You can use a CFML custom tag wrapper around a CFX to make its invocation thread-safe.<\/p> <p>When you display, set, or update variables in a shared scope, use the <samp class=\"codeph\">scope<\/samp> attribute to identify the scope as Server, Application or Session.<\/p> <\/li><br>","Attribute":[{"REQOROPT":"Required","DESCRIPTION":"Maximum length of time, in seconds, to wait to obtain a lock. If lock is obtained, tag execution continues. Otherwise, behavior depends on throwOnTimeout attribute value. If you set timout=\"0\", the timeout is determined by the \"Timeout Requests after x\" setting in the ColdFusion Administrator Settings page, if that setting is enabled. However, if the setting is not enabled, and you set timeout=\"0\", ColdFusion can wait indefinitely to obtain the lock.","default":"","Attribute":"timeout"},{"REQOROPT":"Optional","DESCRIPTION":"Locks name. Mutually exclusive with the scope attribute. Only one request can execute the code within a cflocktag with a given name at a time. Cannot be an empty string. Permits synchronizing access to resources from different parts of an application. Lock names are global to a ColdFusion server. They are shared among applications and user sessions, but not clustered servers.","default":"","Attribute":"name"},{"REQOROPT":"Optional","DESCRIPTION":"Locks scope. Mutually exclusive with the name attribute. Only one request in the specified scope can execute the code within this tag (or within any other cflock tag with the same lock scope) at a time. Application Request Server Session","default":"","Attribute":"scope"},{"REQOROPT":"Optional","DESCRIPTION":"How time-out conditions are handled: yes: exception is generated for the time-out. no: execution continues past this tag.","default":true,"Attribute":"throwOnTimeout"},{"REQOROPT":"Optional","DESCRIPTION":"readOnly: lets more than one request read shared data. exclusive: lets one request read or write shared data.","default":"exclusive","Attribute":"type"}]}